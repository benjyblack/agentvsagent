{-# LANGUAGE DeriveDataTypeable #-}
{-# LANGUAGE OverloadedStrings #-}
{-# OPTIONS_GHC -fno-warn-missing-fields #-}
{-# OPTIONS_GHC -fno-warn-missing-signatures #-}
{-# OPTIONS_GHC -fno-warn-name-shadowing #-}
{-# OPTIONS_GHC -fno-warn-unused-imports #-}
{-# OPTIONS_GHC -fno-warn-unused-matches #-}

-----------------------------------------------------------------
-- Autogenerated by Thrift Compiler (0.9.0)                      --
--                                                             --
-- DO NOT EDIT UNLESS YOU ARE SURE YOU KNOW WHAT YOU ARE DOING --
-----------------------------------------------------------------

module Hearts where
import Prelude ( Bool(..), Enum, Double, String, Maybe(..),
                 Eq, Show, Ord,
                 return, length, IO, fromIntegral, fromEnum, toEnum,
                 (.), (&&), (||), (==), (++), ($), (-) )

import Control.Exception
import Data.ByteString.Lazy
import Data.Hashable
import Data.Int
import Data.Text.Lazy ( Text )
import qualified Data.Text.Lazy as TL
import Data.Typeable ( Typeable )
import qualified Data.HashMap.Strict as Map
import qualified Data.HashSet as Set
import qualified Data.Vector as Vector

import Thrift
import Thrift.Types ()


import Hearts_Types
import qualified Hearts_Iface as Iface
-- HELPER FUNCTIONS AND STRUCTURES --

data Enter_arena_args = Enter_arena_args deriving (Show,Eq,Typeable)
instance Hashable Enter_arena_args where
  hashWithSalt salt record = salt  
write_Enter_arena_args oprot record = do
  writeStructBegin oprot "Enter_arena_args"
  writeFieldStop oprot
  writeStructEnd oprot
read_Enter_arena_args_fields iprot record = do
  (_,_t34,_id35) <- readFieldBegin iprot
  if _t34 == T_STOP then return record else
    case _id35 of 
      _ -> do
        skip iprot _t34
        readFieldEnd iprot
        read_Enter_arena_args_fields iprot record
read_Enter_arena_args iprot = do
  _ <- readStructBegin iprot
  record <- read_Enter_arena_args_fields iprot (Enter_arena_args{})
  readStructEnd iprot
  return record
data Enter_arena_result = Enter_arena_result{f_Enter_arena_result_success :: Maybe EntryResponse} deriving (Show,Eq,Typeable)
instance Hashable Enter_arena_result where
  hashWithSalt salt record = salt   `hashWithSalt` f_Enter_arena_result_success record  
write_Enter_arena_result oprot record = do
  writeStructBegin oprot "Enter_arena_result"
  case f_Enter_arena_result_success record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("success",T_STRUCT,0)
    write_EntryResponse oprot _v
    writeFieldEnd oprot}
  writeFieldStop oprot
  writeStructEnd oprot
read_Enter_arena_result_fields iprot record = do
  (_,_t39,_id40) <- readFieldBegin iprot
  if _t39 == T_STOP then return record else
    case _id40 of 
      0 -> if _t39 == T_STRUCT then do
        s <- (read_EntryResponse iprot)
        read_Enter_arena_result_fields iprot record{f_Enter_arena_result_success=Just s}
        else do
          skip iprot _t39
          read_Enter_arena_result_fields iprot record
      _ -> do
        skip iprot _t39
        readFieldEnd iprot
        read_Enter_arena_result_fields iprot record
read_Enter_arena_result iprot = do
  _ <- readStructBegin iprot
  record <- read_Enter_arena_result_fields iprot (Enter_arena_result{f_Enter_arena_result_success=Nothing})
  readStructEnd iprot
  return record
data Get_game_info_args = Get_game_info_args{f_Get_game_info_args_ticket :: Maybe Ticket} deriving (Show,Eq,Typeable)
instance Hashable Get_game_info_args where
  hashWithSalt salt record = salt   `hashWithSalt` f_Get_game_info_args_ticket record  
write_Get_game_info_args oprot record = do
  writeStructBegin oprot "Get_game_info_args"
  case f_Get_game_info_args_ticket record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("ticket",T_STRUCT,1)
    write_Ticket oprot _v
    writeFieldEnd oprot}
  writeFieldStop oprot
  writeStructEnd oprot
read_Get_game_info_args_fields iprot record = do
  (_,_t44,_id45) <- readFieldBegin iprot
  if _t44 == T_STOP then return record else
    case _id45 of 
      1 -> if _t44 == T_STRUCT then do
        s <- (read_Ticket iprot)
        read_Get_game_info_args_fields iprot record{f_Get_game_info_args_ticket=Just s}
        else do
          skip iprot _t44
          read_Get_game_info_args_fields iprot record
      _ -> do
        skip iprot _t44
        readFieldEnd iprot
        read_Get_game_info_args_fields iprot record
read_Get_game_info_args iprot = do
  _ <- readStructBegin iprot
  record <- read_Get_game_info_args_fields iprot (Get_game_info_args{f_Get_game_info_args_ticket=Nothing})
  readStructEnd iprot
  return record
data Get_game_info_result = Get_game_info_result{f_Get_game_info_result_success :: Maybe GameInfo} deriving (Show,Eq,Typeable)
instance Hashable Get_game_info_result where
  hashWithSalt salt record = salt   `hashWithSalt` f_Get_game_info_result_success record  
write_Get_game_info_result oprot record = do
  writeStructBegin oprot "Get_game_info_result"
  case f_Get_game_info_result_success record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("success",T_STRUCT,0)
    write_GameInfo oprot _v
    writeFieldEnd oprot}
  writeFieldStop oprot
  writeStructEnd oprot
read_Get_game_info_result_fields iprot record = do
  (_,_t49,_id50) <- readFieldBegin iprot
  if _t49 == T_STOP then return record else
    case _id50 of 
      0 -> if _t49 == T_STRUCT then do
        s <- (read_GameInfo iprot)
        read_Get_game_info_result_fields iprot record{f_Get_game_info_result_success=Just s}
        else do
          skip iprot _t49
          read_Get_game_info_result_fields iprot record
      _ -> do
        skip iprot _t49
        readFieldEnd iprot
        read_Get_game_info_result_fields iprot record
read_Get_game_info_result iprot = do
  _ <- readStructBegin iprot
  record <- read_Get_game_info_result_fields iprot (Get_game_info_result{f_Get_game_info_result_success=Nothing})
  readStructEnd iprot
  return record
data Get_hand_args = Get_hand_args{f_Get_hand_args_ticket :: Maybe Ticket} deriving (Show,Eq,Typeable)
instance Hashable Get_hand_args where
  hashWithSalt salt record = salt   `hashWithSalt` f_Get_hand_args_ticket record  
write_Get_hand_args oprot record = do
  writeStructBegin oprot "Get_hand_args"
  case f_Get_hand_args_ticket record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("ticket",T_STRUCT,1)
    write_Ticket oprot _v
    writeFieldEnd oprot}
  writeFieldStop oprot
  writeStructEnd oprot
read_Get_hand_args_fields iprot record = do
  (_,_t54,_id55) <- readFieldBegin iprot
  if _t54 == T_STOP then return record else
    case _id55 of 
      1 -> if _t54 == T_STRUCT then do
        s <- (read_Ticket iprot)
        read_Get_hand_args_fields iprot record{f_Get_hand_args_ticket=Just s}
        else do
          skip iprot _t54
          read_Get_hand_args_fields iprot record
      _ -> do
        skip iprot _t54
        readFieldEnd iprot
        read_Get_hand_args_fields iprot record
read_Get_hand_args iprot = do
  _ <- readStructBegin iprot
  record <- read_Get_hand_args_fields iprot (Get_hand_args{f_Get_hand_args_ticket=Nothing})
  readStructEnd iprot
  return record
data Get_hand_result = Get_hand_result{f_Get_hand_result_success :: Maybe (Vector.Vector Card)} deriving (Show,Eq,Typeable)
instance Hashable Get_hand_result where
  hashWithSalt salt record = salt   `hashWithSalt` f_Get_hand_result_success record  
write_Get_hand_result oprot record = do
  writeStructBegin oprot "Get_hand_result"
  case f_Get_hand_result_success record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("success",T_LIST,0)
    (let f = Vector.mapM_ (\_viter58 -> write_Card oprot _viter58) in do {writeListBegin oprot (T_STRUCT,fromIntegral $ Vector.length _v); f _v;writeListEnd oprot})
    writeFieldEnd oprot}
  writeFieldStop oprot
  writeStructEnd oprot
read_Get_hand_result_fields iprot record = do
  (_,_t60,_id61) <- readFieldBegin iprot
  if _t60 == T_STOP then return record else
    case _id61 of 
      0 -> if _t60 == T_LIST then do
        s <- (let f n = Vector.replicateM (fromIntegral n) ((read_Card iprot)) in do {(_etype65,_size62) <- readListBegin iprot; f _size62})
        read_Get_hand_result_fields iprot record{f_Get_hand_result_success=Just s}
        else do
          skip iprot _t60
          read_Get_hand_result_fields iprot record
      _ -> do
        skip iprot _t60
        readFieldEnd iprot
        read_Get_hand_result_fields iprot record
read_Get_hand_result iprot = do
  _ <- readStructBegin iprot
  record <- read_Get_hand_result_fields iprot (Get_hand_result{f_Get_hand_result_success=Nothing})
  readStructEnd iprot
  return record
data Pass_cards_args = Pass_cards_args{f_Pass_cards_args_ticket :: Maybe Ticket,f_Pass_cards_args_cards :: Maybe (Vector.Vector Card)} deriving (Show,Eq,Typeable)
instance Hashable Pass_cards_args where
  hashWithSalt salt record = salt   `hashWithSalt` f_Pass_cards_args_ticket record   `hashWithSalt` f_Pass_cards_args_cards record  
write_Pass_cards_args oprot record = do
  writeStructBegin oprot "Pass_cards_args"
  case f_Pass_cards_args_ticket record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("ticket",T_STRUCT,1)
    write_Ticket oprot _v
    writeFieldEnd oprot}
  case f_Pass_cards_args_cards record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("cards",T_LIST,2)
    (let f = Vector.mapM_ (\_viter69 -> write_Card oprot _viter69) in do {writeListBegin oprot (T_STRUCT,fromIntegral $ Vector.length _v); f _v;writeListEnd oprot})
    writeFieldEnd oprot}
  writeFieldStop oprot
  writeStructEnd oprot
read_Pass_cards_args_fields iprot record = do
  (_,_t71,_id72) <- readFieldBegin iprot
  if _t71 == T_STOP then return record else
    case _id72 of 
      1 -> if _t71 == T_STRUCT then do
        s <- (read_Ticket iprot)
        read_Pass_cards_args_fields iprot record{f_Pass_cards_args_ticket=Just s}
        else do
          skip iprot _t71
          read_Pass_cards_args_fields iprot record
      2 -> if _t71 == T_LIST then do
        s <- (let f n = Vector.replicateM (fromIntegral n) ((read_Card iprot)) in do {(_etype76,_size73) <- readListBegin iprot; f _size73})
        read_Pass_cards_args_fields iprot record{f_Pass_cards_args_cards=Just s}
        else do
          skip iprot _t71
          read_Pass_cards_args_fields iprot record
      _ -> do
        skip iprot _t71
        readFieldEnd iprot
        read_Pass_cards_args_fields iprot record
read_Pass_cards_args iprot = do
  _ <- readStructBegin iprot
  record <- read_Pass_cards_args_fields iprot (Pass_cards_args{f_Pass_cards_args_ticket=Nothing,f_Pass_cards_args_cards=Nothing})
  readStructEnd iprot
  return record
data Pass_cards_result = Pass_cards_result{f_Pass_cards_result_success :: Maybe (Vector.Vector Card)} deriving (Show,Eq,Typeable)
instance Hashable Pass_cards_result where
  hashWithSalt salt record = salt   `hashWithSalt` f_Pass_cards_result_success record  
write_Pass_cards_result oprot record = do
  writeStructBegin oprot "Pass_cards_result"
  case f_Pass_cards_result_success record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("success",T_LIST,0)
    (let f = Vector.mapM_ (\_viter80 -> write_Card oprot _viter80) in do {writeListBegin oprot (T_STRUCT,fromIntegral $ Vector.length _v); f _v;writeListEnd oprot})
    writeFieldEnd oprot}
  writeFieldStop oprot
  writeStructEnd oprot
read_Pass_cards_result_fields iprot record = do
  (_,_t82,_id83) <- readFieldBegin iprot
  if _t82 == T_STOP then return record else
    case _id83 of 
      0 -> if _t82 == T_LIST then do
        s <- (let f n = Vector.replicateM (fromIntegral n) ((read_Card iprot)) in do {(_etype87,_size84) <- readListBegin iprot; f _size84})
        read_Pass_cards_result_fields iprot record{f_Pass_cards_result_success=Just s}
        else do
          skip iprot _t82
          read_Pass_cards_result_fields iprot record
      _ -> do
        skip iprot _t82
        readFieldEnd iprot
        read_Pass_cards_result_fields iprot record
read_Pass_cards_result iprot = do
  _ <- readStructBegin iprot
  record <- read_Pass_cards_result_fields iprot (Pass_cards_result{f_Pass_cards_result_success=Nothing})
  readStructEnd iprot
  return record
data Get_trick_args = Get_trick_args{f_Get_trick_args_ticket :: Maybe Ticket} deriving (Show,Eq,Typeable)
instance Hashable Get_trick_args where
  hashWithSalt salt record = salt   `hashWithSalt` f_Get_trick_args_ticket record  
write_Get_trick_args oprot record = do
  writeStructBegin oprot "Get_trick_args"
  case f_Get_trick_args_ticket record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("ticket",T_STRUCT,1)
    write_Ticket oprot _v
    writeFieldEnd oprot}
  writeFieldStop oprot
  writeStructEnd oprot
read_Get_trick_args_fields iprot record = do
  (_,_t92,_id93) <- readFieldBegin iprot
  if _t92 == T_STOP then return record else
    case _id93 of 
      1 -> if _t92 == T_STRUCT then do
        s <- (read_Ticket iprot)
        read_Get_trick_args_fields iprot record{f_Get_trick_args_ticket=Just s}
        else do
          skip iprot _t92
          read_Get_trick_args_fields iprot record
      _ -> do
        skip iprot _t92
        readFieldEnd iprot
        read_Get_trick_args_fields iprot record
read_Get_trick_args iprot = do
  _ <- readStructBegin iprot
  record <- read_Get_trick_args_fields iprot (Get_trick_args{f_Get_trick_args_ticket=Nothing})
  readStructEnd iprot
  return record
data Get_trick_result = Get_trick_result{f_Get_trick_result_success :: Maybe Trick} deriving (Show,Eq,Typeable)
instance Hashable Get_trick_result where
  hashWithSalt salt record = salt   `hashWithSalt` f_Get_trick_result_success record  
write_Get_trick_result oprot record = do
  writeStructBegin oprot "Get_trick_result"
  case f_Get_trick_result_success record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("success",T_STRUCT,0)
    write_Trick oprot _v
    writeFieldEnd oprot}
  writeFieldStop oprot
  writeStructEnd oprot
read_Get_trick_result_fields iprot record = do
  (_,_t97,_id98) <- readFieldBegin iprot
  if _t97 == T_STOP then return record else
    case _id98 of 
      0 -> if _t97 == T_STRUCT then do
        s <- (read_Trick iprot)
        read_Get_trick_result_fields iprot record{f_Get_trick_result_success=Just s}
        else do
          skip iprot _t97
          read_Get_trick_result_fields iprot record
      _ -> do
        skip iprot _t97
        readFieldEnd iprot
        read_Get_trick_result_fields iprot record
read_Get_trick_result iprot = do
  _ <- readStructBegin iprot
  record <- read_Get_trick_result_fields iprot (Get_trick_result{f_Get_trick_result_success=Nothing})
  readStructEnd iprot
  return record
data Play_card_args = Play_card_args{f_Play_card_args_ticket :: Maybe Ticket,f_Play_card_args_card :: Maybe Card} deriving (Show,Eq,Typeable)
instance Hashable Play_card_args where
  hashWithSalt salt record = salt   `hashWithSalt` f_Play_card_args_ticket record   `hashWithSalt` f_Play_card_args_card record  
write_Play_card_args oprot record = do
  writeStructBegin oprot "Play_card_args"
  case f_Play_card_args_ticket record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("ticket",T_STRUCT,1)
    write_Ticket oprot _v
    writeFieldEnd oprot}
  case f_Play_card_args_card record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("card",T_STRUCT,2)
    write_Card oprot _v
    writeFieldEnd oprot}
  writeFieldStop oprot
  writeStructEnd oprot
read_Play_card_args_fields iprot record = do
  (_,_t102,_id103) <- readFieldBegin iprot
  if _t102 == T_STOP then return record else
    case _id103 of 
      1 -> if _t102 == T_STRUCT then do
        s <- (read_Ticket iprot)
        read_Play_card_args_fields iprot record{f_Play_card_args_ticket=Just s}
        else do
          skip iprot _t102
          read_Play_card_args_fields iprot record
      2 -> if _t102 == T_STRUCT then do
        s <- (read_Card iprot)
        read_Play_card_args_fields iprot record{f_Play_card_args_card=Just s}
        else do
          skip iprot _t102
          read_Play_card_args_fields iprot record
      _ -> do
        skip iprot _t102
        readFieldEnd iprot
        read_Play_card_args_fields iprot record
read_Play_card_args iprot = do
  _ <- readStructBegin iprot
  record <- read_Play_card_args_fields iprot (Play_card_args{f_Play_card_args_ticket=Nothing,f_Play_card_args_card=Nothing})
  readStructEnd iprot
  return record
data Play_card_result = Play_card_result{f_Play_card_result_success :: Maybe Trick} deriving (Show,Eq,Typeable)
instance Hashable Play_card_result where
  hashWithSalt salt record = salt   `hashWithSalt` f_Play_card_result_success record  
write_Play_card_result oprot record = do
  writeStructBegin oprot "Play_card_result"
  case f_Play_card_result_success record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("success",T_STRUCT,0)
    write_Trick oprot _v
    writeFieldEnd oprot}
  writeFieldStop oprot
  writeStructEnd oprot
read_Play_card_result_fields iprot record = do
  (_,_t107,_id108) <- readFieldBegin iprot
  if _t107 == T_STOP then return record else
    case _id108 of 
      0 -> if _t107 == T_STRUCT then do
        s <- (read_Trick iprot)
        read_Play_card_result_fields iprot record{f_Play_card_result_success=Just s}
        else do
          skip iprot _t107
          read_Play_card_result_fields iprot record
      _ -> do
        skip iprot _t107
        readFieldEnd iprot
        read_Play_card_result_fields iprot record
read_Play_card_result iprot = do
  _ <- readStructBegin iprot
  record <- read_Play_card_result_fields iprot (Play_card_result{f_Play_card_result_success=Nothing})
  readStructEnd iprot
  return record
process_enter_arena (seqid, iprot, oprot, handler) = do
  args <- read_Enter_arena_args iprot
  readMessageEnd iprot
  rs <- return (Enter_arena_result Nothing)
  res <- (do
    res <- Iface.enter_arena handler
    return rs{f_Enter_arena_result_success= Just res})
  writeMessageBegin oprot ("enter_arena", M_REPLY, seqid);
  write_Enter_arena_result oprot res
  writeMessageEnd oprot
  tFlush (getTransport oprot)
process_get_game_info (seqid, iprot, oprot, handler) = do
  args <- read_Get_game_info_args iprot
  readMessageEnd iprot
  rs <- return (Get_game_info_result Nothing)
  res <- (do
    res <- Iface.get_game_info handler (f_Get_game_info_args_ticket args)
    return rs{f_Get_game_info_result_success= Just res})
  writeMessageBegin oprot ("get_game_info", M_REPLY, seqid);
  write_Get_game_info_result oprot res
  writeMessageEnd oprot
  tFlush (getTransport oprot)
process_get_hand (seqid, iprot, oprot, handler) = do
  args <- read_Get_hand_args iprot
  readMessageEnd iprot
  rs <- return (Get_hand_result Nothing)
  res <- (do
    res <- Iface.get_hand handler (f_Get_hand_args_ticket args)
    return rs{f_Get_hand_result_success= Just res})
  writeMessageBegin oprot ("get_hand", M_REPLY, seqid);
  write_Get_hand_result oprot res
  writeMessageEnd oprot
  tFlush (getTransport oprot)
process_pass_cards (seqid, iprot, oprot, handler) = do
  args <- read_Pass_cards_args iprot
  readMessageEnd iprot
  rs <- return (Pass_cards_result Nothing)
  res <- (do
    res <- Iface.pass_cards handler (f_Pass_cards_args_ticket args) (f_Pass_cards_args_cards args)
    return rs{f_Pass_cards_result_success= Just res})
  writeMessageBegin oprot ("pass_cards", M_REPLY, seqid);
  write_Pass_cards_result oprot res
  writeMessageEnd oprot
  tFlush (getTransport oprot)
process_get_trick (seqid, iprot, oprot, handler) = do
  args <- read_Get_trick_args iprot
  readMessageEnd iprot
  rs <- return (Get_trick_result Nothing)
  res <- (do
    res <- Iface.get_trick handler (f_Get_trick_args_ticket args)
    return rs{f_Get_trick_result_success= Just res})
  writeMessageBegin oprot ("get_trick", M_REPLY, seqid);
  write_Get_trick_result oprot res
  writeMessageEnd oprot
  tFlush (getTransport oprot)
process_play_card (seqid, iprot, oprot, handler) = do
  args <- read_Play_card_args iprot
  readMessageEnd iprot
  rs <- return (Play_card_result Nothing)
  res <- (do
    res <- Iface.play_card handler (f_Play_card_args_ticket args) (f_Play_card_args_card args)
    return rs{f_Play_card_result_success= Just res})
  writeMessageBegin oprot ("play_card", M_REPLY, seqid);
  write_Play_card_result oprot res
  writeMessageEnd oprot
  tFlush (getTransport oprot)
proc_ handler (iprot,oprot) (name,typ,seqid) = case name of
  "enter_arena" -> process_enter_arena (seqid,iprot,oprot,handler)
  "get_game_info" -> process_get_game_info (seqid,iprot,oprot,handler)
  "get_hand" -> process_get_hand (seqid,iprot,oprot,handler)
  "pass_cards" -> process_pass_cards (seqid,iprot,oprot,handler)
  "get_trick" -> process_get_trick (seqid,iprot,oprot,handler)
  "play_card" -> process_play_card (seqid,iprot,oprot,handler)
  _ -> do
    skip iprot T_STRUCT
    readMessageEnd iprot
    writeMessageBegin oprot (name,M_EXCEPTION,seqid)
    writeAppExn oprot (AppExn AE_UNKNOWN_METHOD ("Unknown function " ++ TL.unpack name))
    writeMessageEnd oprot
    tFlush (getTransport oprot)
process handler (iprot, oprot) = do
  (name, typ, seqid) <- readMessageBegin iprot
  proc_ handler (iprot,oprot) (name,typ,seqid)
  return True
