/* Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package hearts;

import (
        "thrift"
        "fmt"
)

import (
        "os"
)


type IHearts interface {
  EnterArena() (retval30 *EntryResponse, err os.Error)
  /**
   * Parameters:
   *  - Ticket
   */
  GetGameInfo(ticket *Ticket) (retval31 *GameInfo, err os.Error)
  /**
   * Parameters:
   *  - Ticket
   */
  GetHand(ticket *Ticket) (retval32 thrift.TList, err os.Error)
  /**
   * Parameters:
   *  - Ticket
   *  - Cards
   */
  PassCards(ticket *Ticket, cards thrift.TList) (retval33 thrift.TList, err os.Error)
  /**
   * Parameters:
   *  - Ticket
   */
  GetTrick(ticket *Ticket) (retval34 *Trick, err os.Error)
  /**
   * Parameters:
   *  - Ticket
   *  - Card
   */
  PlayCard(ticket *Ticket, card *Card) (retval35 *Trick, err os.Error)
}

type HeartsClient struct {
  Transport thrift.TTransport
  ProtocolFactory thrift.TProtocolFactory
  InputProtocol thrift.TProtocol
  OutputProtocol thrift.TProtocol
  SeqId int32
}

func NewHeartsClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *HeartsClient {
  return &HeartsClient{Transport: t,
    ProtocolFactory: f,
    InputProtocol: f.GetProtocol(t),
    OutputProtocol: f.GetProtocol(t),
    SeqId: 0,
  }
}

func NewHeartsClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *HeartsClient {
  return &HeartsClient{Transport: t,
    ProtocolFactory: nil,
    InputProtocol: iprot,
    OutputProtocol: oprot,
    SeqId: 0,
  }
}

func (p *HeartsClient) EnterArena() (retval36 *EntryResponse, err os.Error) {
  err = p.SendEnterArena()
  if err != nil { return }
  return p.RecvEnterArena()
}

func (p *HeartsClient) SendEnterArena()(err os.Error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("enter_arena", thrift.CALL, p.SeqId)
  args37 := NewEnterArenaArgs()
  err = args37.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *HeartsClient) RecvEnterArena() (value *EntryResponse, err os.Error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error39 := thrift.NewTApplicationExceptionDefault()
    error40, err := error39.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error40
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result38 := NewEnterArenaResult()
  err = result38.Read(iprot)
  iprot.ReadMessageEnd()
  value = result38.Success
  return
}

/**
 * Parameters:
 *  - Ticket
 */
func (p *HeartsClient) GetGameInfo(ticket *Ticket) (retval41 *GameInfo, err os.Error) {
  err = p.SendGetGameInfo(ticket)
  if err != nil { return }
  return p.RecvGetGameInfo()
}

func (p *HeartsClient) SendGetGameInfo(ticket *Ticket)(err os.Error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("get_game_info", thrift.CALL, p.SeqId)
  args42 := NewGetGameInfoArgs()
  args42.Ticket = ticket
  err = args42.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *HeartsClient) RecvGetGameInfo() (value *GameInfo, err os.Error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error44 := thrift.NewTApplicationExceptionDefault()
    error45, err := error44.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error45
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result43 := NewGetGameInfoResult()
  err = result43.Read(iprot)
  iprot.ReadMessageEnd()
  value = result43.Success
  return
}

/**
 * Parameters:
 *  - Ticket
 */
func (p *HeartsClient) GetHand(ticket *Ticket) (retval46 thrift.TList, err os.Error) {
  err = p.SendGetHand(ticket)
  if err != nil { return }
  return p.RecvGetHand()
}

func (p *HeartsClient) SendGetHand(ticket *Ticket)(err os.Error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("get_hand", thrift.CALL, p.SeqId)
  args47 := NewGetHandArgs()
  args47.Ticket = ticket
  err = args47.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *HeartsClient) RecvGetHand() (value thrift.TList, err os.Error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error49 := thrift.NewTApplicationExceptionDefault()
    error50, err := error49.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error50
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result48 := NewGetHandResult()
  err = result48.Read(iprot)
  iprot.ReadMessageEnd()
  value = result48.Success
  return
}

/**
 * Parameters:
 *  - Ticket
 *  - Cards
 */
func (p *HeartsClient) PassCards(ticket *Ticket, cards thrift.TList) (retval51 thrift.TList, err os.Error) {
  err = p.SendPassCards(ticket, cards)
  if err != nil { return }
  return p.RecvPassCards()
}

func (p *HeartsClient) SendPassCards(ticket *Ticket, cards thrift.TList)(err os.Error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("pass_cards", thrift.CALL, p.SeqId)
  args52 := NewPassCardsArgs()
  args52.Ticket = ticket
  args52.Cards = cards
  err = args52.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *HeartsClient) RecvPassCards() (value thrift.TList, err os.Error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error54 := thrift.NewTApplicationExceptionDefault()
    error55, err := error54.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error55
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result53 := NewPassCardsResult()
  err = result53.Read(iprot)
  iprot.ReadMessageEnd()
  value = result53.Success
  return
}

/**
 * Parameters:
 *  - Ticket
 */
func (p *HeartsClient) GetTrick(ticket *Ticket) (retval56 *Trick, err os.Error) {
  err = p.SendGetTrick(ticket)
  if err != nil { return }
  return p.RecvGetTrick()
}

func (p *HeartsClient) SendGetTrick(ticket *Ticket)(err os.Error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("get_trick", thrift.CALL, p.SeqId)
  args57 := NewGetTrickArgs()
  args57.Ticket = ticket
  err = args57.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *HeartsClient) RecvGetTrick() (value *Trick, err os.Error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error59 := thrift.NewTApplicationExceptionDefault()
    error60, err := error59.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error60
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result58 := NewGetTrickResult()
  err = result58.Read(iprot)
  iprot.ReadMessageEnd()
  value = result58.Success
  return
}

/**
 * Parameters:
 *  - Ticket
 *  - Card
 */
func (p *HeartsClient) PlayCard(ticket *Ticket, card *Card) (retval61 *Trick, err os.Error) {
  err = p.SendPlayCard(ticket, card)
  if err != nil { return }
  return p.RecvPlayCard()
}

func (p *HeartsClient) SendPlayCard(ticket *Ticket, card *Card)(err os.Error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("play_card", thrift.CALL, p.SeqId)
  args62 := NewPlayCardArgs()
  args62.Ticket = ticket
  args62.Card = card
  err = args62.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *HeartsClient) RecvPlayCard() (value *Trick, err os.Error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error64 := thrift.NewTApplicationExceptionDefault()
    error65, err := error64.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error65
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result63 := NewPlayCardResult()
  err = result63.Read(iprot)
  iprot.ReadMessageEnd()
  value = result63.Success
  return
}


type HeartsProcessor struct {
  handler IHearts
  processorMap map[string]thrift.TProcessorFunction
}

func (p *HeartsProcessor) Handler() IHearts {
  return p.handler
}

func (p *HeartsProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
  p.processorMap[key] = processor
}

func (p *HeartsProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, exists bool) {
  processor, exists = p.processorMap[key]
  return processor, exists
}

func (p *HeartsProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
  return p.processorMap
}

func NewHeartsProcessor(handler IHearts) *HeartsProcessor {

  self66 := &HeartsProcessor{handler:handler, processorMap:make(map[string]thrift.TProcessorFunction)}
  self66.processorMap["enter_arena"] = &heartsProcessorEnterArena{handler:handler}
  self66.processorMap["get_game_info"] = &heartsProcessorGetGameInfo{handler:handler}
  self66.processorMap["get_hand"] = &heartsProcessorGetHand{handler:handler}
  self66.processorMap["pass_cards"] = &heartsProcessorPassCards{handler:handler}
  self66.processorMap["get_trick"] = &heartsProcessorGetTrick{handler:handler}
  self66.processorMap["play_card"] = &heartsProcessorPlayCard{handler:handler}
return self66
}

func (p *HeartsProcessor) Process(iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  name, _, seqId, err := iprot.ReadMessageBegin()
  if err != nil { return }
  process, nameFound := p.GetProcessorFunction(name)
  if !nameFound || process == nil {
    iprot.Skip(thrift.STRUCT)
    iprot.ReadMessageEnd()
    x67 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function " + name)
    oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
    x67.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return false, x67
  }
  return process.Process(seqId, iprot, oprot)
}

type heartsProcessorEnterArena struct {
  handler IHearts
}

func (p *heartsProcessorEnterArena) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewEnterArenaArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.String())
    oprot.WriteMessageBegin("enter_arena", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewEnterArenaResult()
  if result.Success, err = p.handler.EnterArena(); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing enter_arena: " + err.String())
    oprot.WriteMessageBegin("enter_arena", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("enter_arena", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type heartsProcessorGetGameInfo struct {
  handler IHearts
}

func (p *heartsProcessorGetGameInfo) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewGetGameInfoArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.String())
    oprot.WriteMessageBegin("get_game_info", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewGetGameInfoResult()
  if result.Success, err = p.handler.GetGameInfo(args.Ticket); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_game_info: " + err.String())
    oprot.WriteMessageBegin("get_game_info", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("get_game_info", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type heartsProcessorGetHand struct {
  handler IHearts
}

func (p *heartsProcessorGetHand) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewGetHandArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.String())
    oprot.WriteMessageBegin("get_hand", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewGetHandResult()
  if result.Success, err = p.handler.GetHand(args.Ticket); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_hand: " + err.String())
    oprot.WriteMessageBegin("get_hand", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("get_hand", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type heartsProcessorPassCards struct {
  handler IHearts
}

func (p *heartsProcessorPassCards) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewPassCardsArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.String())
    oprot.WriteMessageBegin("pass_cards", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewPassCardsResult()
  if result.Success, err = p.handler.PassCards(args.Ticket, args.Cards); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing pass_cards: " + err.String())
    oprot.WriteMessageBegin("pass_cards", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("pass_cards", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type heartsProcessorGetTrick struct {
  handler IHearts
}

func (p *heartsProcessorGetTrick) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewGetTrickArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.String())
    oprot.WriteMessageBegin("get_trick", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewGetTrickResult()
  if result.Success, err = p.handler.GetTrick(args.Ticket); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_trick: " + err.String())
    oprot.WriteMessageBegin("get_trick", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("get_trick", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type heartsProcessorPlayCard struct {
  handler IHearts
}

func (p *heartsProcessorPlayCard) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewPlayCardArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.String())
    oprot.WriteMessageBegin("play_card", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewPlayCardResult()
  if result.Success, err = p.handler.PlayCard(args.Ticket, args.Card); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing play_card: " + err.String())
    oprot.WriteMessageBegin("play_card", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("play_card", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}


// HELPER FUNCTIONS AND STRUCTURES

type EnterArenaArgs struct {
  thrift.TStruct
}

func NewEnterArenaArgs() *EnterArenaArgs {
  output := &EnterArenaArgs{
    TStruct:thrift.NewTStruct("enter_arena_args", []thrift.TField{
    }),
  }
  {
  }
  return output
}

func (p *EnterArenaArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    err = iprot.Skip(fieldTypeId)
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *EnterArenaArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("enter_arena_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *EnterArenaArgs) TStructName() string {
  return "EnterArenaArgs"
}

func (p *EnterArenaArgs) ThriftName() string {
  return "enter_arena_args"
}

func (p *EnterArenaArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("EnterArenaArgs(%+v)", *p)
}

func (p *EnterArenaArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  _, ok := other.(*EnterArenaArgs)
  if !ok {
    return 0, false
  }
  return 0, true
}

func (p *EnterArenaArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  }
  return nil
}

func (p *EnterArenaArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    })
}

/**
 * Attributes:
 *  - Success
 */
type EnterArenaResult struct {
  thrift.TStruct
  Success *EntryResponse "success"; // 0
}

func NewEnterArenaResult() *EnterArenaResult {
  output := &EnterArenaResult{
    TStruct:thrift.NewTStruct("enter_arena_result", []thrift.TField{
    thrift.NewTField("success", thrift.STRUCT, 0),
    }),
  }
  {
  }
  return output
}

func (p *EnterArenaResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 0 || fieldName == "success" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *EnterArenaResult) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.Success = NewEntryResponse()
  err70 := p.Success.Read(iprot)
  if err70 != nil { return thrift.NewTProtocolExceptionReadStruct("p.SuccessEntryResponse", err70); }
  return err
}

func (p *EnterArenaResult) ReadFieldSuccess(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField0(iprot)
}

func (p *EnterArenaResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("enter_arena_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  switch {
  default:
    if err = p.WriteField0(oprot); err != nil {
      return err
    }
  }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *EnterArenaResult) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.Success != nil {
    err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
    err = p.Success.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("EntryResponse", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  }
  return err
}

func (p *EnterArenaResult) WriteFieldSuccess(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField0(oprot)
}

func (p *EnterArenaResult) TStructName() string {
  return "EnterArenaResult"
}

func (p *EnterArenaResult) ThriftName() string {
  return "enter_arena_result"
}

func (p *EnterArenaResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("EnterArenaResult(%+v)", *p)
}

func (p *EnterArenaResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*EnterArenaResult)
  if !ok {
    return 0, false
  }
  if cmp, ok := p.Success.CompareTo(data.Success); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *EnterArenaResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 0: return p.Success
  }
  return nil
}

func (p *EnterArenaResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("success", thrift.STRUCT, 0),
    })
}

/**
 * Attributes:
 *  - Ticket
 */
type GetGameInfoArgs struct {
  thrift.TStruct
  Ticket *Ticket "ticket"; // 1
}

func NewGetGameInfoArgs() *GetGameInfoArgs {
  output := &GetGameInfoArgs{
    TStruct:thrift.NewTStruct("get_game_info_args", []thrift.TField{
    thrift.NewTField("ticket", thrift.STRUCT, 1),
    }),
  }
  {
  }
  return output
}

func (p *GetGameInfoArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "ticket" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *GetGameInfoArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.Ticket = NewTicket()
  err73 := p.Ticket.Read(iprot)
  if err73 != nil { return thrift.NewTProtocolExceptionReadStruct("p.TicketTicket", err73); }
  return err
}

func (p *GetGameInfoArgs) ReadFieldTicket(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *GetGameInfoArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("get_game_info_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *GetGameInfoArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.Ticket != nil {
    err = oprot.WriteFieldBegin("ticket", thrift.STRUCT, 1)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "ticket", p.ThriftName(), err); }
    err = p.Ticket.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("Ticket", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "ticket", p.ThriftName(), err); }
  }
  return err
}

func (p *GetGameInfoArgs) WriteFieldTicket(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *GetGameInfoArgs) TStructName() string {
  return "GetGameInfoArgs"
}

func (p *GetGameInfoArgs) ThriftName() string {
  return "get_game_info_args"
}

func (p *GetGameInfoArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetGameInfoArgs(%+v)", *p)
}

func (p *GetGameInfoArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*GetGameInfoArgs)
  if !ok {
    return 0, false
  }
  if cmp, ok := p.Ticket.CompareTo(data.Ticket); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *GetGameInfoArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p.Ticket
  }
  return nil
}

func (p *GetGameInfoArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("ticket", thrift.STRUCT, 1),
    })
}

/**
 * Attributes:
 *  - Success
 */
type GetGameInfoResult struct {
  thrift.TStruct
  Success *GameInfo "success"; // 0
}

func NewGetGameInfoResult() *GetGameInfoResult {
  output := &GetGameInfoResult{
    TStruct:thrift.NewTStruct("get_game_info_result", []thrift.TField{
    thrift.NewTField("success", thrift.STRUCT, 0),
    }),
  }
  {
  }
  return output
}

func (p *GetGameInfoResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 0 || fieldName == "success" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *GetGameInfoResult) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.Success = NewGameInfo()
  err76 := p.Success.Read(iprot)
  if err76 != nil { return thrift.NewTProtocolExceptionReadStruct("p.SuccessGameInfo", err76); }
  return err
}

func (p *GetGameInfoResult) ReadFieldSuccess(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField0(iprot)
}

func (p *GetGameInfoResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("get_game_info_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  switch {
  default:
    if err = p.WriteField0(oprot); err != nil {
      return err
    }
  }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *GetGameInfoResult) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.Success != nil {
    err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
    err = p.Success.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("GameInfo", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  }
  return err
}

func (p *GetGameInfoResult) WriteFieldSuccess(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField0(oprot)
}

func (p *GetGameInfoResult) TStructName() string {
  return "GetGameInfoResult"
}

func (p *GetGameInfoResult) ThriftName() string {
  return "get_game_info_result"
}

func (p *GetGameInfoResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetGameInfoResult(%+v)", *p)
}

func (p *GetGameInfoResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*GetGameInfoResult)
  if !ok {
    return 0, false
  }
  if cmp, ok := p.Success.CompareTo(data.Success); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *GetGameInfoResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 0: return p.Success
  }
  return nil
}

func (p *GetGameInfoResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("success", thrift.STRUCT, 0),
    })
}

/**
 * Attributes:
 *  - Ticket
 */
type GetHandArgs struct {
  thrift.TStruct
  Ticket *Ticket "ticket"; // 1
}

func NewGetHandArgs() *GetHandArgs {
  output := &GetHandArgs{
    TStruct:thrift.NewTStruct("get_hand_args", []thrift.TField{
    thrift.NewTField("ticket", thrift.STRUCT, 1),
    }),
  }
  {
  }
  return output
}

func (p *GetHandArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "ticket" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *GetHandArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.Ticket = NewTicket()
  err79 := p.Ticket.Read(iprot)
  if err79 != nil { return thrift.NewTProtocolExceptionReadStruct("p.TicketTicket", err79); }
  return err
}

func (p *GetHandArgs) ReadFieldTicket(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *GetHandArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("get_hand_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *GetHandArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.Ticket != nil {
    err = oprot.WriteFieldBegin("ticket", thrift.STRUCT, 1)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "ticket", p.ThriftName(), err); }
    err = p.Ticket.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("Ticket", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "ticket", p.ThriftName(), err); }
  }
  return err
}

func (p *GetHandArgs) WriteFieldTicket(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *GetHandArgs) TStructName() string {
  return "GetHandArgs"
}

func (p *GetHandArgs) ThriftName() string {
  return "get_hand_args"
}

func (p *GetHandArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetHandArgs(%+v)", *p)
}

func (p *GetHandArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*GetHandArgs)
  if !ok {
    return 0, false
  }
  if cmp, ok := p.Ticket.CompareTo(data.Ticket); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *GetHandArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p.Ticket
  }
  return nil
}

func (p *GetHandArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("ticket", thrift.STRUCT, 1),
    })
}

/**
 * Attributes:
 *  - Success
 */
type GetHandResult struct {
  thrift.TStruct
  Success thrift.TList "success"; // 0
}

func NewGetHandResult() *GetHandResult {
  output := &GetHandResult{
    TStruct:thrift.NewTStruct("get_hand_result", []thrift.TField{
    thrift.NewTField("success", thrift.LIST, 0),
    }),
  }
  {
  }
  return output
}

func (p *GetHandResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 0 || fieldName == "success" {
      if fieldTypeId == thrift.LIST {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *GetHandResult) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _etype85, _size82, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.NewTProtocolExceptionReadField(-1, "p.Success", "", err)
  }
  p.Success = thrift.NewTList(_etype85, _size82)
  for _i86:= 0; _i86 < _size82; _i86++ {
    _elem87 := NewCard()
    err90 := _elem87.Read(iprot)
    if err90 != nil { return thrift.NewTProtocolExceptionReadStruct("_elem87Card", err90); }
    p.Success.Push(_elem87)
  }
  err = iprot.ReadListEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadField(-1, "", "list",err); }
  return err
}

func (p *GetHandResult) ReadFieldSuccess(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField0(iprot)
}

func (p *GetHandResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("get_hand_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  switch {
  default:
    if err = p.WriteField0(oprot); err != nil {
      return err
    }
  }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *GetHandResult) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.Success != nil {
    err = oprot.WriteFieldBegin("success", thrift.LIST, 0)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
    err = oprot.WriteListBegin(thrift.STRUCT, p.Success.Len())
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err); }
    for Iter91 := range p.Success.Iter() {
      Iter92 := Iter91.(*Card)
      err = Iter92.Write(oprot)
      if err != nil { return thrift.NewTProtocolExceptionWriteStruct("Card", err); }
    }
    err = oprot.WriteListEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  }
  return err
}

func (p *GetHandResult) WriteFieldSuccess(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField0(oprot)
}

func (p *GetHandResult) TStructName() string {
  return "GetHandResult"
}

func (p *GetHandResult) ThriftName() string {
  return "get_hand_result"
}

func (p *GetHandResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetHandResult(%+v)", *p)
}

func (p *GetHandResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*GetHandResult)
  if !ok {
    return 0, false
  }
  if cmp, ok := p.Success.CompareTo(data.Success); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *GetHandResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 0: return p.Success
  }
  return nil
}

func (p *GetHandResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("success", thrift.LIST, 0),
    })
}

/**
 * Attributes:
 *  - Ticket
 *  - Cards
 */
type PassCardsArgs struct {
  thrift.TStruct
  Ticket *Ticket "ticket"; // 1
  Cards thrift.TList "cards"; // 2
}

func NewPassCardsArgs() *PassCardsArgs {
  output := &PassCardsArgs{
    TStruct:thrift.NewTStruct("pass_cards_args", []thrift.TField{
    thrift.NewTField("ticket", thrift.STRUCT, 1),
    thrift.NewTField("cards", thrift.LIST, 2),
    }),
  }
  {
  }
  return output
}

func (p *PassCardsArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "ticket" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "cards" {
      if fieldTypeId == thrift.LIST {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *PassCardsArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.Ticket = NewTicket()
  err95 := p.Ticket.Read(iprot)
  if err95 != nil { return thrift.NewTProtocolExceptionReadStruct("p.TicketTicket", err95); }
  return err
}

func (p *PassCardsArgs) ReadFieldTicket(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *PassCardsArgs) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _etype101, _size98, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.NewTProtocolExceptionReadField(-1, "p.Cards", "", err)
  }
  p.Cards = thrift.NewTList(_etype101, _size98)
  for _i102:= 0; _i102 < _size98; _i102++ {
    _elem103 := NewCard()
    err106 := _elem103.Read(iprot)
    if err106 != nil { return thrift.NewTProtocolExceptionReadStruct("_elem103Card", err106); }
    p.Cards.Push(_elem103)
  }
  err = iprot.ReadListEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadField(-1, "", "list",err); }
  return err
}

func (p *PassCardsArgs) ReadFieldCards(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *PassCardsArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("pass_cards_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *PassCardsArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.Ticket != nil {
    err = oprot.WriteFieldBegin("ticket", thrift.STRUCT, 1)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "ticket", p.ThriftName(), err); }
    err = p.Ticket.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("Ticket", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "ticket", p.ThriftName(), err); }
  }
  return err
}

func (p *PassCardsArgs) WriteFieldTicket(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *PassCardsArgs) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.Cards != nil {
    err = oprot.WriteFieldBegin("cards", thrift.LIST, 2)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "cards", p.ThriftName(), err); }
    err = oprot.WriteListBegin(thrift.STRUCT, p.Cards.Len())
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err); }
    for Iter107 := range p.Cards.Iter() {
      Iter108 := Iter107.(*Card)
      err = Iter108.Write(oprot)
      if err != nil { return thrift.NewTProtocolExceptionWriteStruct("Card", err); }
    }
    err = oprot.WriteListEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "cards", p.ThriftName(), err); }
  }
  return err
}

func (p *PassCardsArgs) WriteFieldCards(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *PassCardsArgs) TStructName() string {
  return "PassCardsArgs"
}

func (p *PassCardsArgs) ThriftName() string {
  return "pass_cards_args"
}

func (p *PassCardsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("PassCardsArgs(%+v)", *p)
}

func (p *PassCardsArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*PassCardsArgs)
  if !ok {
    return 0, false
  }
  if cmp, ok := p.Ticket.CompareTo(data.Ticket); !ok || cmp != 0 {
    return cmp, ok
  }
  if cmp, ok := p.Cards.CompareTo(data.Cards); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *PassCardsArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p.Ticket
  case 2: return p.Cards
  }
  return nil
}

func (p *PassCardsArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("ticket", thrift.STRUCT, 1),
    thrift.NewTField("cards", thrift.LIST, 2),
    })
}

/**
 * Attributes:
 *  - Success
 */
type PassCardsResult struct {
  thrift.TStruct
  Success thrift.TList "success"; // 0
}

func NewPassCardsResult() *PassCardsResult {
  output := &PassCardsResult{
    TStruct:thrift.NewTStruct("pass_cards_result", []thrift.TField{
    thrift.NewTField("success", thrift.LIST, 0),
    }),
  }
  {
  }
  return output
}

func (p *PassCardsResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 0 || fieldName == "success" {
      if fieldTypeId == thrift.LIST {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *PassCardsResult) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _etype114, _size111, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.NewTProtocolExceptionReadField(-1, "p.Success", "", err)
  }
  p.Success = thrift.NewTList(_etype114, _size111)
  for _i115:= 0; _i115 < _size111; _i115++ {
    _elem116 := NewCard()
    err119 := _elem116.Read(iprot)
    if err119 != nil { return thrift.NewTProtocolExceptionReadStruct("_elem116Card", err119); }
    p.Success.Push(_elem116)
  }
  err = iprot.ReadListEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadField(-1, "", "list",err); }
  return err
}

func (p *PassCardsResult) ReadFieldSuccess(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField0(iprot)
}

func (p *PassCardsResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("pass_cards_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  switch {
  default:
    if err = p.WriteField0(oprot); err != nil {
      return err
    }
  }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *PassCardsResult) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.Success != nil {
    err = oprot.WriteFieldBegin("success", thrift.LIST, 0)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
    err = oprot.WriteListBegin(thrift.STRUCT, p.Success.Len())
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err); }
    for Iter120 := range p.Success.Iter() {
      Iter121 := Iter120.(*Card)
      err = Iter121.Write(oprot)
      if err != nil { return thrift.NewTProtocolExceptionWriteStruct("Card", err); }
    }
    err = oprot.WriteListEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  }
  return err
}

func (p *PassCardsResult) WriteFieldSuccess(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField0(oprot)
}

func (p *PassCardsResult) TStructName() string {
  return "PassCardsResult"
}

func (p *PassCardsResult) ThriftName() string {
  return "pass_cards_result"
}

func (p *PassCardsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("PassCardsResult(%+v)", *p)
}

func (p *PassCardsResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*PassCardsResult)
  if !ok {
    return 0, false
  }
  if cmp, ok := p.Success.CompareTo(data.Success); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *PassCardsResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 0: return p.Success
  }
  return nil
}

func (p *PassCardsResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("success", thrift.LIST, 0),
    })
}

/**
 * Attributes:
 *  - Ticket
 */
type GetTrickArgs struct {
  thrift.TStruct
  Ticket *Ticket "ticket"; // 1
}

func NewGetTrickArgs() *GetTrickArgs {
  output := &GetTrickArgs{
    TStruct:thrift.NewTStruct("get_trick_args", []thrift.TField{
    thrift.NewTField("ticket", thrift.STRUCT, 1),
    }),
  }
  {
  }
  return output
}

func (p *GetTrickArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "ticket" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *GetTrickArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.Ticket = NewTicket()
  err124 := p.Ticket.Read(iprot)
  if err124 != nil { return thrift.NewTProtocolExceptionReadStruct("p.TicketTicket", err124); }
  return err
}

func (p *GetTrickArgs) ReadFieldTicket(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *GetTrickArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("get_trick_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *GetTrickArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.Ticket != nil {
    err = oprot.WriteFieldBegin("ticket", thrift.STRUCT, 1)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "ticket", p.ThriftName(), err); }
    err = p.Ticket.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("Ticket", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "ticket", p.ThriftName(), err); }
  }
  return err
}

func (p *GetTrickArgs) WriteFieldTicket(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *GetTrickArgs) TStructName() string {
  return "GetTrickArgs"
}

func (p *GetTrickArgs) ThriftName() string {
  return "get_trick_args"
}

func (p *GetTrickArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetTrickArgs(%+v)", *p)
}

func (p *GetTrickArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*GetTrickArgs)
  if !ok {
    return 0, false
  }
  if cmp, ok := p.Ticket.CompareTo(data.Ticket); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *GetTrickArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p.Ticket
  }
  return nil
}

func (p *GetTrickArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("ticket", thrift.STRUCT, 1),
    })
}

/**
 * Attributes:
 *  - Success
 */
type GetTrickResult struct {
  thrift.TStruct
  Success *Trick "success"; // 0
}

func NewGetTrickResult() *GetTrickResult {
  output := &GetTrickResult{
    TStruct:thrift.NewTStruct("get_trick_result", []thrift.TField{
    thrift.NewTField("success", thrift.STRUCT, 0),
    }),
  }
  {
  }
  return output
}

func (p *GetTrickResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 0 || fieldName == "success" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *GetTrickResult) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.Success = NewTrick()
  err127 := p.Success.Read(iprot)
  if err127 != nil { return thrift.NewTProtocolExceptionReadStruct("p.SuccessTrick", err127); }
  return err
}

func (p *GetTrickResult) ReadFieldSuccess(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField0(iprot)
}

func (p *GetTrickResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("get_trick_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  switch {
  default:
    if err = p.WriteField0(oprot); err != nil {
      return err
    }
  }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *GetTrickResult) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.Success != nil {
    err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
    err = p.Success.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("Trick", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  }
  return err
}

func (p *GetTrickResult) WriteFieldSuccess(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField0(oprot)
}

func (p *GetTrickResult) TStructName() string {
  return "GetTrickResult"
}

func (p *GetTrickResult) ThriftName() string {
  return "get_trick_result"
}

func (p *GetTrickResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetTrickResult(%+v)", *p)
}

func (p *GetTrickResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*GetTrickResult)
  if !ok {
    return 0, false
  }
  if cmp, ok := p.Success.CompareTo(data.Success); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *GetTrickResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 0: return p.Success
  }
  return nil
}

func (p *GetTrickResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("success", thrift.STRUCT, 0),
    })
}

/**
 * Attributes:
 *  - Ticket
 *  - Card
 */
type PlayCardArgs struct {
  thrift.TStruct
  Ticket *Ticket "ticket"; // 1
  Card *Card "card"; // 2
}

func NewPlayCardArgs() *PlayCardArgs {
  output := &PlayCardArgs{
    TStruct:thrift.NewTStruct("play_card_args", []thrift.TField{
    thrift.NewTField("ticket", thrift.STRUCT, 1),
    thrift.NewTField("card", thrift.STRUCT, 2),
    }),
  }
  {
  }
  return output
}

func (p *PlayCardArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "ticket" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "card" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *PlayCardArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.Ticket = NewTicket()
  err130 := p.Ticket.Read(iprot)
  if err130 != nil { return thrift.NewTProtocolExceptionReadStruct("p.TicketTicket", err130); }
  return err
}

func (p *PlayCardArgs) ReadFieldTicket(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *PlayCardArgs) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.Card = NewCard()
  err133 := p.Card.Read(iprot)
  if err133 != nil { return thrift.NewTProtocolExceptionReadStruct("p.CardCard", err133); }
  return err
}

func (p *PlayCardArgs) ReadFieldCard(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *PlayCardArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("play_card_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *PlayCardArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.Ticket != nil {
    err = oprot.WriteFieldBegin("ticket", thrift.STRUCT, 1)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "ticket", p.ThriftName(), err); }
    err = p.Ticket.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("Ticket", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "ticket", p.ThriftName(), err); }
  }
  return err
}

func (p *PlayCardArgs) WriteFieldTicket(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *PlayCardArgs) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.Card != nil {
    err = oprot.WriteFieldBegin("card", thrift.STRUCT, 2)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "card", p.ThriftName(), err); }
    err = p.Card.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("Card", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "card", p.ThriftName(), err); }
  }
  return err
}

func (p *PlayCardArgs) WriteFieldCard(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *PlayCardArgs) TStructName() string {
  return "PlayCardArgs"
}

func (p *PlayCardArgs) ThriftName() string {
  return "play_card_args"
}

func (p *PlayCardArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("PlayCardArgs(%+v)", *p)
}

func (p *PlayCardArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*PlayCardArgs)
  if !ok {
    return 0, false
  }
  if cmp, ok := p.Ticket.CompareTo(data.Ticket); !ok || cmp != 0 {
    return cmp, ok
  }
  if cmp, ok := p.Card.CompareTo(data.Card); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *PlayCardArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p.Ticket
  case 2: return p.Card
  }
  return nil
}

func (p *PlayCardArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("ticket", thrift.STRUCT, 1),
    thrift.NewTField("card", thrift.STRUCT, 2),
    })
}

/**
 * Attributes:
 *  - Success
 */
type PlayCardResult struct {
  thrift.TStruct
  Success *Trick "success"; // 0
}

func NewPlayCardResult() *PlayCardResult {
  output := &PlayCardResult{
    TStruct:thrift.NewTStruct("play_card_result", []thrift.TField{
    thrift.NewTField("success", thrift.STRUCT, 0),
    }),
  }
  {
  }
  return output
}

func (p *PlayCardResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 0 || fieldName == "success" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *PlayCardResult) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.Success = NewTrick()
  err136 := p.Success.Read(iprot)
  if err136 != nil { return thrift.NewTProtocolExceptionReadStruct("p.SuccessTrick", err136); }
  return err
}

func (p *PlayCardResult) ReadFieldSuccess(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField0(iprot)
}

func (p *PlayCardResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("play_card_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  switch {
  default:
    if err = p.WriteField0(oprot); err != nil {
      return err
    }
  }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *PlayCardResult) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.Success != nil {
    err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
    err = p.Success.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("Trick", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  }
  return err
}

func (p *PlayCardResult) WriteFieldSuccess(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField0(oprot)
}

func (p *PlayCardResult) TStructName() string {
  return "PlayCardResult"
}

func (p *PlayCardResult) ThriftName() string {
  return "play_card_result"
}

func (p *PlayCardResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("PlayCardResult(%+v)", *p)
}

func (p *PlayCardResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*PlayCardResult)
  if !ok {
    return 0, false
  }
  if cmp, ok := p.Success.CompareTo(data.Success); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *PlayCardResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 0: return p.Success
  }
  return nil
}

func (p *PlayCardResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("success", thrift.STRUCT, 0),
    })
}


