/* Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package hearts;

import (
        "thrift"
        "fmt"
)

import (
        "os"
)


type IHearts interface {
  /**
   * Parameters:
   *  - Request
   */
  EnterArena(request *EntryRequest) (retval54 *EntryResponse, err os.Error)
  /**
   * Parameters:
   *  - Ticket
   */
  GetGameInfo(ticket *Ticket) (retval55 *GameInfo, ex1 *GameAbortedException, err os.Error)
  /**
   * Parameters:
   *  - Ticket
   */
  GetHand(ticket *Ticket) (retval56 thrift.TList, ex1 *OutOfSequenceException, ex2 *GameAbortedException, err os.Error)
  /**
   * Parameters:
   *  - Ticket
   *  - Cards
   */
  PassCards(ticket *Ticket, cards thrift.TList) (retval57 thrift.TList, ex1 *OutOfSequenceException, ex2 *InvalidMoveException, ex3 *GameAbortedException, err os.Error)
  /**
   * Parameters:
   *  - Ticket
   */
  GetTrick(ticket *Ticket) (retval58 *Trick, ex1 *OutOfSequenceException, ex3 *GameAbortedException, err os.Error)
  /**
   * Parameters:
   *  - Ticket
   *  - Card
   */
  PlayCard(ticket *Ticket, card *Card) (retval59 *Trick, ex1 *OutOfSequenceException, ex2 *InvalidMoveException, ex3 *GameAbortedException, err os.Error)
  /**
   * Parameters:
   *  - Ticket
   */
  GetRoundResult(ticket *Ticket) (retval60 *RoundResult, ex1 *OutOfSequenceException, ex3 *GameAbortedException, err os.Error)
  /**
   * Parameters:
   *  - Ticket
   */
  GetGameResult(ticket *Ticket) (retval61 *GameResult, ex1 *OutOfSequenceException, ex3 *GameAbortedException, err os.Error)
}

type HeartsClient struct {
  Transport thrift.TTransport
  ProtocolFactory thrift.TProtocolFactory
  InputProtocol thrift.TProtocol
  OutputProtocol thrift.TProtocol
  SeqId int32
}

func NewHeartsClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *HeartsClient {
  return &HeartsClient{Transport: t,
    ProtocolFactory: f,
    InputProtocol: f.GetProtocol(t),
    OutputProtocol: f.GetProtocol(t),
    SeqId: 0,
  }
}

func NewHeartsClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *HeartsClient {
  return &HeartsClient{Transport: t,
    ProtocolFactory: nil,
    InputProtocol: iprot,
    OutputProtocol: oprot,
    SeqId: 0,
  }
}

/**
 * Parameters:
 *  - Request
 */
func (p *HeartsClient) EnterArena(request *EntryRequest) (retval62 *EntryResponse, err os.Error) {
  err = p.SendEnterArena(request)
  if err != nil { return }
  return p.RecvEnterArena()
}

func (p *HeartsClient) SendEnterArena(request *EntryRequest)(err os.Error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("enter_arena", thrift.CALL, p.SeqId)
  args63 := NewEnterArenaArgs()
  args63.Request = request
  err = args63.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *HeartsClient) RecvEnterArena() (value *EntryResponse, err os.Error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error65 := thrift.NewTApplicationExceptionDefault()
    error66, err := error65.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error66
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result64 := NewEnterArenaResult()
  err = result64.Read(iprot)
  iprot.ReadMessageEnd()
  value = result64.Success
  return
}

/**
 * Parameters:
 *  - Ticket
 */
func (p *HeartsClient) GetGameInfo(ticket *Ticket) (retval67 *GameInfo, ex1 *GameAbortedException, err os.Error) {
  err = p.SendGetGameInfo(ticket)
  if err != nil { return }
  return p.RecvGetGameInfo()
}

func (p *HeartsClient) SendGetGameInfo(ticket *Ticket)(err os.Error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("get_game_info", thrift.CALL, p.SeqId)
  args68 := NewGetGameInfoArgs()
  args68.Ticket = ticket
  err = args68.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *HeartsClient) RecvGetGameInfo() (value *GameInfo, ex1 *GameAbortedException, err os.Error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error70 := thrift.NewTApplicationExceptionDefault()
    error71, err := error70.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error71
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result69 := NewGetGameInfoResult()
  err = result69.Read(iprot)
  iprot.ReadMessageEnd()
  value = result69.Success
  if result69.Ex1 != nil {
    ex1 = result69.Ex1
  }
  return
}

/**
 * Parameters:
 *  - Ticket
 */
func (p *HeartsClient) GetHand(ticket *Ticket) (retval72 thrift.TList, ex1 *OutOfSequenceException, ex2 *GameAbortedException, err os.Error) {
  err = p.SendGetHand(ticket)
  if err != nil { return }
  return p.RecvGetHand()
}

func (p *HeartsClient) SendGetHand(ticket *Ticket)(err os.Error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("get_hand", thrift.CALL, p.SeqId)
  args73 := NewGetHandArgs()
  args73.Ticket = ticket
  err = args73.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *HeartsClient) RecvGetHand() (value thrift.TList, ex1 *OutOfSequenceException, ex2 *GameAbortedException, err os.Error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error75 := thrift.NewTApplicationExceptionDefault()
    error76, err := error75.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error76
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result74 := NewGetHandResult()
  err = result74.Read(iprot)
  iprot.ReadMessageEnd()
  value = result74.Success
  if result74.Ex1 != nil {
    ex1 = result74.Ex1
  }
  if result74.Ex2 != nil {
    ex2 = result74.Ex2
  }
  return
}

/**
 * Parameters:
 *  - Ticket
 *  - Cards
 */
func (p *HeartsClient) PassCards(ticket *Ticket, cards thrift.TList) (retval77 thrift.TList, ex1 *OutOfSequenceException, ex2 *InvalidMoveException, ex3 *GameAbortedException, err os.Error) {
  err = p.SendPassCards(ticket, cards)
  if err != nil { return }
  return p.RecvPassCards()
}

func (p *HeartsClient) SendPassCards(ticket *Ticket, cards thrift.TList)(err os.Error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("pass_cards", thrift.CALL, p.SeqId)
  args78 := NewPassCardsArgs()
  args78.Ticket = ticket
  args78.Cards = cards
  err = args78.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *HeartsClient) RecvPassCards() (value thrift.TList, ex1 *OutOfSequenceException, ex2 *InvalidMoveException, ex3 *GameAbortedException, err os.Error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error80 := thrift.NewTApplicationExceptionDefault()
    error81, err := error80.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error81
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result79 := NewPassCardsResult()
  err = result79.Read(iprot)
  iprot.ReadMessageEnd()
  value = result79.Success
  if result79.Ex1 != nil {
    ex1 = result79.Ex1
  }
  if result79.Ex2 != nil {
    ex2 = result79.Ex2
  }
  if result79.Ex3 != nil {
    ex3 = result79.Ex3
  }
  return
}

/**
 * Parameters:
 *  - Ticket
 */
func (p *HeartsClient) GetTrick(ticket *Ticket) (retval82 *Trick, ex1 *OutOfSequenceException, ex3 *GameAbortedException, err os.Error) {
  err = p.SendGetTrick(ticket)
  if err != nil { return }
  return p.RecvGetTrick()
}

func (p *HeartsClient) SendGetTrick(ticket *Ticket)(err os.Error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("get_trick", thrift.CALL, p.SeqId)
  args83 := NewGetTrickArgs()
  args83.Ticket = ticket
  err = args83.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *HeartsClient) RecvGetTrick() (value *Trick, ex1 *OutOfSequenceException, ex3 *GameAbortedException, err os.Error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error85 := thrift.NewTApplicationExceptionDefault()
    error86, err := error85.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error86
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result84 := NewGetTrickResult()
  err = result84.Read(iprot)
  iprot.ReadMessageEnd()
  value = result84.Success
  if result84.Ex1 != nil {
    ex1 = result84.Ex1
  }
  if result84.Ex3 != nil {
    ex3 = result84.Ex3
  }
  return
}

/**
 * Parameters:
 *  - Ticket
 *  - Card
 */
func (p *HeartsClient) PlayCard(ticket *Ticket, card *Card) (retval87 *Trick, ex1 *OutOfSequenceException, ex2 *InvalidMoveException, ex3 *GameAbortedException, err os.Error) {
  err = p.SendPlayCard(ticket, card)
  if err != nil { return }
  return p.RecvPlayCard()
}

func (p *HeartsClient) SendPlayCard(ticket *Ticket, card *Card)(err os.Error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("play_card", thrift.CALL, p.SeqId)
  args88 := NewPlayCardArgs()
  args88.Ticket = ticket
  args88.Card = card
  err = args88.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *HeartsClient) RecvPlayCard() (value *Trick, ex1 *OutOfSequenceException, ex2 *InvalidMoveException, ex3 *GameAbortedException, err os.Error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error90 := thrift.NewTApplicationExceptionDefault()
    error91, err := error90.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error91
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result89 := NewPlayCardResult()
  err = result89.Read(iprot)
  iprot.ReadMessageEnd()
  value = result89.Success
  if result89.Ex1 != nil {
    ex1 = result89.Ex1
  }
  if result89.Ex2 != nil {
    ex2 = result89.Ex2
  }
  if result89.Ex3 != nil {
    ex3 = result89.Ex3
  }
  return
}

/**
 * Parameters:
 *  - Ticket
 */
func (p *HeartsClient) GetRoundResult(ticket *Ticket) (retval92 *RoundResult, ex1 *OutOfSequenceException, ex3 *GameAbortedException, err os.Error) {
  err = p.SendGetRoundResult(ticket)
  if err != nil { return }
  return p.RecvGetRoundResult()
}

func (p *HeartsClient) SendGetRoundResult(ticket *Ticket)(err os.Error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("get_round_result", thrift.CALL, p.SeqId)
  args93 := NewGetRoundResultArgs()
  args93.Ticket = ticket
  err = args93.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *HeartsClient) RecvGetRoundResult() (value *RoundResult, ex1 *OutOfSequenceException, ex3 *GameAbortedException, err os.Error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error95 := thrift.NewTApplicationExceptionDefault()
    error96, err := error95.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error96
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result94 := NewGetRoundResultResult()
  err = result94.Read(iprot)
  iprot.ReadMessageEnd()
  value = result94.Success
  if result94.Ex1 != nil {
    ex1 = result94.Ex1
  }
  if result94.Ex3 != nil {
    ex3 = result94.Ex3
  }
  return
}

/**
 * Parameters:
 *  - Ticket
 */
func (p *HeartsClient) GetGameResult(ticket *Ticket) (retval97 *GameResult, ex1 *OutOfSequenceException, ex3 *GameAbortedException, err os.Error) {
  err = p.SendGetGameResult(ticket)
  if err != nil { return }
  return p.RecvGetGameResult()
}

func (p *HeartsClient) SendGetGameResult(ticket *Ticket)(err os.Error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("get_game_result", thrift.CALL, p.SeqId)
  args98 := NewGetGameResultArgs()
  args98.Ticket = ticket
  err = args98.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *HeartsClient) RecvGetGameResult() (value *GameResult, ex1 *OutOfSequenceException, ex3 *GameAbortedException, err os.Error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error100 := thrift.NewTApplicationExceptionDefault()
    error101, err := error100.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error101
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result99 := NewGetGameResultResult()
  err = result99.Read(iprot)
  iprot.ReadMessageEnd()
  value = result99.Success
  if result99.Ex1 != nil {
    ex1 = result99.Ex1
  }
  if result99.Ex3 != nil {
    ex3 = result99.Ex3
  }
  return
}


type HeartsProcessor struct {
  handler IHearts
  processorMap map[string]thrift.TProcessorFunction
}

func (p *HeartsProcessor) Handler() IHearts {
  return p.handler
}

func (p *HeartsProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
  p.processorMap[key] = processor
}

func (p *HeartsProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, exists bool) {
  processor, exists = p.processorMap[key]
  return processor, exists
}

func (p *HeartsProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
  return p.processorMap
}

func NewHeartsProcessor(handler IHearts) *HeartsProcessor {

  self102 := &HeartsProcessor{handler:handler, processorMap:make(map[string]thrift.TProcessorFunction)}
  self102.processorMap["enter_arena"] = &heartsProcessorEnterArena{handler:handler}
  self102.processorMap["get_game_info"] = &heartsProcessorGetGameInfo{handler:handler}
  self102.processorMap["get_hand"] = &heartsProcessorGetHand{handler:handler}
  self102.processorMap["pass_cards"] = &heartsProcessorPassCards{handler:handler}
  self102.processorMap["get_trick"] = &heartsProcessorGetTrick{handler:handler}
  self102.processorMap["play_card"] = &heartsProcessorPlayCard{handler:handler}
  self102.processorMap["get_round_result"] = &heartsProcessorGetRoundResult{handler:handler}
  self102.processorMap["get_game_result"] = &heartsProcessorGetGameResult{handler:handler}
return self102
}

func (p *HeartsProcessor) Process(iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  name, _, seqId, err := iprot.ReadMessageBegin()
  if err != nil { return }
  process, nameFound := p.GetProcessorFunction(name)
  if !nameFound || process == nil {
    iprot.Skip(thrift.STRUCT)
    iprot.ReadMessageEnd()
    x103 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function " + name)
    oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
    x103.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return false, x103
  }
  return process.Process(seqId, iprot, oprot)
}

type heartsProcessorEnterArena struct {
  handler IHearts
}

func (p *heartsProcessorEnterArena) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewEnterArenaArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.String())
    oprot.WriteMessageBegin("enter_arena", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewEnterArenaResult()
  if result.Success, err = p.handler.EnterArena(args.Request); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing enter_arena: " + err.String())
    oprot.WriteMessageBegin("enter_arena", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("enter_arena", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type heartsProcessorGetGameInfo struct {
  handler IHearts
}

func (p *heartsProcessorGetGameInfo) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewGetGameInfoArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.String())
    oprot.WriteMessageBegin("get_game_info", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewGetGameInfoResult()
  if result.Success, result.Ex1, err = p.handler.GetGameInfo(args.Ticket); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_game_info: " + err.String())
    oprot.WriteMessageBegin("get_game_info", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("get_game_info", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type heartsProcessorGetHand struct {
  handler IHearts
}

func (p *heartsProcessorGetHand) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewGetHandArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.String())
    oprot.WriteMessageBegin("get_hand", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewGetHandResult()
  if result.Success, result.Ex1, result.Ex2, err = p.handler.GetHand(args.Ticket); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_hand: " + err.String())
    oprot.WriteMessageBegin("get_hand", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("get_hand", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type heartsProcessorPassCards struct {
  handler IHearts
}

func (p *heartsProcessorPassCards) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewPassCardsArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.String())
    oprot.WriteMessageBegin("pass_cards", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewPassCardsResult()
  if result.Success, result.Ex1, result.Ex2, result.Ex3, err = p.handler.PassCards(args.Ticket, args.Cards); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing pass_cards: " + err.String())
    oprot.WriteMessageBegin("pass_cards", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("pass_cards", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type heartsProcessorGetTrick struct {
  handler IHearts
}

func (p *heartsProcessorGetTrick) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewGetTrickArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.String())
    oprot.WriteMessageBegin("get_trick", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewGetTrickResult()
  if result.Success, result.Ex1, result.Ex3, err = p.handler.GetTrick(args.Ticket); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_trick: " + err.String())
    oprot.WriteMessageBegin("get_trick", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("get_trick", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type heartsProcessorPlayCard struct {
  handler IHearts
}

func (p *heartsProcessorPlayCard) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewPlayCardArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.String())
    oprot.WriteMessageBegin("play_card", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewPlayCardResult()
  if result.Success, result.Ex1, result.Ex2, result.Ex3, err = p.handler.PlayCard(args.Ticket, args.Card); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing play_card: " + err.String())
    oprot.WriteMessageBegin("play_card", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("play_card", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type heartsProcessorGetRoundResult struct {
  handler IHearts
}

func (p *heartsProcessorGetRoundResult) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewGetRoundResultArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.String())
    oprot.WriteMessageBegin("get_round_result", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewGetRoundResultResult()
  if result.Success, result.Ex1, result.Ex3, err = p.handler.GetRoundResult(args.Ticket); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_round_result: " + err.String())
    oprot.WriteMessageBegin("get_round_result", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("get_round_result", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type heartsProcessorGetGameResult struct {
  handler IHearts
}

func (p *heartsProcessorGetGameResult) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewGetGameResultArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.String())
    oprot.WriteMessageBegin("get_game_result", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewGetGameResultResult()
  if result.Success, result.Ex1, result.Ex3, err = p.handler.GetGameResult(args.Ticket); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_game_result: " + err.String())
    oprot.WriteMessageBegin("get_game_result", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("get_game_result", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}


// HELPER FUNCTIONS AND STRUCTURES

/**
 * Attributes:
 *  - Request
 */
type EnterArenaArgs struct {
  thrift.TStruct
  Request *EntryRequest "request"; // 1
}

func NewEnterArenaArgs() *EnterArenaArgs {
  output := &EnterArenaArgs{
    TStruct:thrift.NewTStruct("enter_arena_args", []thrift.TField{
    thrift.NewTField("request", thrift.STRUCT, 1),
    }),
  }
  {
  }
  return output
}

func (p *EnterArenaArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "request" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *EnterArenaArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.Request = NewEntryRequest()
  err106 := p.Request.Read(iprot)
  if err106 != nil { return thrift.NewTProtocolExceptionReadStruct("p.RequestEntryRequest", err106); }
  return err
}

func (p *EnterArenaArgs) ReadFieldRequest(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *EnterArenaArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("enter_arena_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *EnterArenaArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.Request != nil {
    err = oprot.WriteFieldBegin("request", thrift.STRUCT, 1)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "request", p.ThriftName(), err); }
    err = p.Request.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("EntryRequest", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "request", p.ThriftName(), err); }
  }
  return err
}

func (p *EnterArenaArgs) WriteFieldRequest(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *EnterArenaArgs) TStructName() string {
  return "EnterArenaArgs"
}

func (p *EnterArenaArgs) ThriftName() string {
  return "enter_arena_args"
}

func (p *EnterArenaArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("EnterArenaArgs(%+v)", *p)
}

func (p *EnterArenaArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*EnterArenaArgs)
  if !ok {
    return 0, false
  }
  if cmp, ok := p.Request.CompareTo(data.Request); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *EnterArenaArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p.Request
  }
  return nil
}

func (p *EnterArenaArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("request", thrift.STRUCT, 1),
    })
}

/**
 * Attributes:
 *  - Success
 */
type EnterArenaResult struct {
  thrift.TStruct
  Success *EntryResponse "success"; // 0
}

func NewEnterArenaResult() *EnterArenaResult {
  output := &EnterArenaResult{
    TStruct:thrift.NewTStruct("enter_arena_result", []thrift.TField{
    thrift.NewTField("success", thrift.STRUCT, 0),
    }),
  }
  {
  }
  return output
}

func (p *EnterArenaResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 0 || fieldName == "success" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *EnterArenaResult) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.Success = NewEntryResponse()
  err109 := p.Success.Read(iprot)
  if err109 != nil { return thrift.NewTProtocolExceptionReadStruct("p.SuccessEntryResponse", err109); }
  return err
}

func (p *EnterArenaResult) ReadFieldSuccess(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField0(iprot)
}

func (p *EnterArenaResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("enter_arena_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  switch {
  default:
    if err = p.WriteField0(oprot); err != nil {
      return err
    }
  }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *EnterArenaResult) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.Success != nil {
    err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
    err = p.Success.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("EntryResponse", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  }
  return err
}

func (p *EnterArenaResult) WriteFieldSuccess(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField0(oprot)
}

func (p *EnterArenaResult) TStructName() string {
  return "EnterArenaResult"
}

func (p *EnterArenaResult) ThriftName() string {
  return "enter_arena_result"
}

func (p *EnterArenaResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("EnterArenaResult(%+v)", *p)
}

func (p *EnterArenaResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*EnterArenaResult)
  if !ok {
    return 0, false
  }
  if cmp, ok := p.Success.CompareTo(data.Success); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *EnterArenaResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 0: return p.Success
  }
  return nil
}

func (p *EnterArenaResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("success", thrift.STRUCT, 0),
    })
}

/**
 * Attributes:
 *  - Ticket
 */
type GetGameInfoArgs struct {
  thrift.TStruct
  Ticket *Ticket "ticket"; // 1
}

func NewGetGameInfoArgs() *GetGameInfoArgs {
  output := &GetGameInfoArgs{
    TStruct:thrift.NewTStruct("get_game_info_args", []thrift.TField{
    thrift.NewTField("ticket", thrift.STRUCT, 1),
    }),
  }
  {
  }
  return output
}

func (p *GetGameInfoArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "ticket" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *GetGameInfoArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.Ticket = NewTicket()
  err112 := p.Ticket.Read(iprot)
  if err112 != nil { return thrift.NewTProtocolExceptionReadStruct("p.TicketTicket", err112); }
  return err
}

func (p *GetGameInfoArgs) ReadFieldTicket(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *GetGameInfoArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("get_game_info_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *GetGameInfoArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.Ticket != nil {
    err = oprot.WriteFieldBegin("ticket", thrift.STRUCT, 1)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "ticket", p.ThriftName(), err); }
    err = p.Ticket.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("Ticket", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "ticket", p.ThriftName(), err); }
  }
  return err
}

func (p *GetGameInfoArgs) WriteFieldTicket(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *GetGameInfoArgs) TStructName() string {
  return "GetGameInfoArgs"
}

func (p *GetGameInfoArgs) ThriftName() string {
  return "get_game_info_args"
}

func (p *GetGameInfoArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetGameInfoArgs(%+v)", *p)
}

func (p *GetGameInfoArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*GetGameInfoArgs)
  if !ok {
    return 0, false
  }
  if cmp, ok := p.Ticket.CompareTo(data.Ticket); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *GetGameInfoArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p.Ticket
  }
  return nil
}

func (p *GetGameInfoArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("ticket", thrift.STRUCT, 1),
    })
}

/**
 * Attributes:
 *  - Success
 *  - Ex1
 */
type GetGameInfoResult struct {
  thrift.TStruct
  Success *GameInfo "success"; // 0
  Ex1 *GameAbortedException "ex1"; // 1
}

func NewGetGameInfoResult() *GetGameInfoResult {
  output := &GetGameInfoResult{
    TStruct:thrift.NewTStruct("get_game_info_result", []thrift.TField{
    thrift.NewTField("success", thrift.STRUCT, 0),
    thrift.NewTField("ex1", thrift.STRUCT, 1),
    }),
  }
  {
  }
  return output
}

func (p *GetGameInfoResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 0 || fieldName == "success" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 1 || fieldName == "ex1" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *GetGameInfoResult) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.Success = NewGameInfo()
  err115 := p.Success.Read(iprot)
  if err115 != nil { return thrift.NewTProtocolExceptionReadStruct("p.SuccessGameInfo", err115); }
  return err
}

func (p *GetGameInfoResult) ReadFieldSuccess(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField0(iprot)
}

func (p *GetGameInfoResult) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.Ex1 = NewGameAbortedException()
  err118 := p.Ex1.Read(iprot)
  if err118 != nil { return thrift.NewTProtocolExceptionReadStruct("p.Ex1GameAbortedException", err118); }
  return err
}

func (p *GetGameInfoResult) ReadFieldEx1(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *GetGameInfoResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("get_game_info_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  switch {
  case p.Ex1 != nil:
    if err = p.WriteField1(oprot); err != nil {
      return err
    }
  default:
    if err = p.WriteField0(oprot); err != nil {
      return err
    }
  }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *GetGameInfoResult) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.Success != nil {
    err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
    err = p.Success.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("GameInfo", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  }
  return err
}

func (p *GetGameInfoResult) WriteFieldSuccess(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField0(oprot)
}

func (p *GetGameInfoResult) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.Ex1 != nil {
    err = oprot.WriteFieldBegin("ex1", thrift.STRUCT, 1)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "ex1", p.ThriftName(), err); }
    err = p.Ex1.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("GameAbortedException", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "ex1", p.ThriftName(), err); }
  }
  return err
}

func (p *GetGameInfoResult) WriteFieldEx1(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *GetGameInfoResult) TStructName() string {
  return "GetGameInfoResult"
}

func (p *GetGameInfoResult) ThriftName() string {
  return "get_game_info_result"
}

func (p *GetGameInfoResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetGameInfoResult(%+v)", *p)
}

func (p *GetGameInfoResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*GetGameInfoResult)
  if !ok {
    return 0, false
  }
  if cmp, ok := p.Success.CompareTo(data.Success); !ok || cmp != 0 {
    return cmp, ok
  }
  if cmp, ok := p.Ex1.CompareTo(data.Ex1); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *GetGameInfoResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 0: return p.Success
  case 1: return p.Ex1
  }
  return nil
}

func (p *GetGameInfoResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("success", thrift.STRUCT, 0),
    thrift.NewTField("ex1", thrift.STRUCT, 1),
    })
}

/**
 * Attributes:
 *  - Ticket
 */
type GetHandArgs struct {
  thrift.TStruct
  Ticket *Ticket "ticket"; // 1
}

func NewGetHandArgs() *GetHandArgs {
  output := &GetHandArgs{
    TStruct:thrift.NewTStruct("get_hand_args", []thrift.TField{
    thrift.NewTField("ticket", thrift.STRUCT, 1),
    }),
  }
  {
  }
  return output
}

func (p *GetHandArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "ticket" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *GetHandArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.Ticket = NewTicket()
  err121 := p.Ticket.Read(iprot)
  if err121 != nil { return thrift.NewTProtocolExceptionReadStruct("p.TicketTicket", err121); }
  return err
}

func (p *GetHandArgs) ReadFieldTicket(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *GetHandArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("get_hand_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *GetHandArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.Ticket != nil {
    err = oprot.WriteFieldBegin("ticket", thrift.STRUCT, 1)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "ticket", p.ThriftName(), err); }
    err = p.Ticket.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("Ticket", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "ticket", p.ThriftName(), err); }
  }
  return err
}

func (p *GetHandArgs) WriteFieldTicket(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *GetHandArgs) TStructName() string {
  return "GetHandArgs"
}

func (p *GetHandArgs) ThriftName() string {
  return "get_hand_args"
}

func (p *GetHandArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetHandArgs(%+v)", *p)
}

func (p *GetHandArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*GetHandArgs)
  if !ok {
    return 0, false
  }
  if cmp, ok := p.Ticket.CompareTo(data.Ticket); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *GetHandArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p.Ticket
  }
  return nil
}

func (p *GetHandArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("ticket", thrift.STRUCT, 1),
    })
}

/**
 * Attributes:
 *  - Success
 *  - Ex1
 *  - Ex2
 */
type GetHandResult struct {
  thrift.TStruct
  Success thrift.TList "success"; // 0
  Ex1 *OutOfSequenceException "ex1"; // 1
  Ex2 *GameAbortedException "ex2"; // 2
}

func NewGetHandResult() *GetHandResult {
  output := &GetHandResult{
    TStruct:thrift.NewTStruct("get_hand_result", []thrift.TField{
    thrift.NewTField("success", thrift.LIST, 0),
    thrift.NewTField("ex1", thrift.STRUCT, 1),
    thrift.NewTField("ex2", thrift.STRUCT, 2),
    }),
  }
  {
  }
  return output
}

func (p *GetHandResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 0 || fieldName == "success" {
      if fieldTypeId == thrift.LIST {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 1 || fieldName == "ex1" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "ex2" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *GetHandResult) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _etype127, _size124, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.NewTProtocolExceptionReadField(-1, "p.Success", "", err)
  }
  p.Success = thrift.NewTList(_etype127, _size124)
  for _i128:= 0; _i128 < _size124; _i128++ {
    _elem129 := NewCard()
    err132 := _elem129.Read(iprot)
    if err132 != nil { return thrift.NewTProtocolExceptionReadStruct("_elem129Card", err132); }
    p.Success.Push(_elem129)
  }
  err = iprot.ReadListEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadField(-1, "", "list",err); }
  return err
}

func (p *GetHandResult) ReadFieldSuccess(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField0(iprot)
}

func (p *GetHandResult) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.Ex1 = NewOutOfSequenceException()
  err135 := p.Ex1.Read(iprot)
  if err135 != nil { return thrift.NewTProtocolExceptionReadStruct("p.Ex1OutOfSequenceException", err135); }
  return err
}

func (p *GetHandResult) ReadFieldEx1(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *GetHandResult) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.Ex2 = NewGameAbortedException()
  err138 := p.Ex2.Read(iprot)
  if err138 != nil { return thrift.NewTProtocolExceptionReadStruct("p.Ex2GameAbortedException", err138); }
  return err
}

func (p *GetHandResult) ReadFieldEx2(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *GetHandResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("get_hand_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  switch {
  case p.Ex2 != nil:
    if err = p.WriteField2(oprot); err != nil {
      return err
    }
  case p.Ex1 != nil:
    if err = p.WriteField1(oprot); err != nil {
      return err
    }
  default:
    if err = p.WriteField0(oprot); err != nil {
      return err
    }
  }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *GetHandResult) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.Success != nil {
    err = oprot.WriteFieldBegin("success", thrift.LIST, 0)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
    err = oprot.WriteListBegin(thrift.STRUCT, p.Success.Len())
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err); }
    for Iter139 := range p.Success.Iter() {
      Iter140 := Iter139.(*Card)
      err = Iter140.Write(oprot)
      if err != nil { return thrift.NewTProtocolExceptionWriteStruct("Card", err); }
    }
    err = oprot.WriteListEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  }
  return err
}

func (p *GetHandResult) WriteFieldSuccess(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField0(oprot)
}

func (p *GetHandResult) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.Ex1 != nil {
    err = oprot.WriteFieldBegin("ex1", thrift.STRUCT, 1)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "ex1", p.ThriftName(), err); }
    err = p.Ex1.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("OutOfSequenceException", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "ex1", p.ThriftName(), err); }
  }
  return err
}

func (p *GetHandResult) WriteFieldEx1(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *GetHandResult) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.Ex2 != nil {
    err = oprot.WriteFieldBegin("ex2", thrift.STRUCT, 2)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "ex2", p.ThriftName(), err); }
    err = p.Ex2.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("GameAbortedException", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "ex2", p.ThriftName(), err); }
  }
  return err
}

func (p *GetHandResult) WriteFieldEx2(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *GetHandResult) TStructName() string {
  return "GetHandResult"
}

func (p *GetHandResult) ThriftName() string {
  return "get_hand_result"
}

func (p *GetHandResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetHandResult(%+v)", *p)
}

func (p *GetHandResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*GetHandResult)
  if !ok {
    return 0, false
  }
  if cmp, ok := p.Success.CompareTo(data.Success); !ok || cmp != 0 {
    return cmp, ok
  }
  if cmp, ok := p.Ex1.CompareTo(data.Ex1); !ok || cmp != 0 {
    return cmp, ok
  }
  if cmp, ok := p.Ex2.CompareTo(data.Ex2); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *GetHandResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 0: return p.Success
  case 1: return p.Ex1
  case 2: return p.Ex2
  }
  return nil
}

func (p *GetHandResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("success", thrift.LIST, 0),
    thrift.NewTField("ex1", thrift.STRUCT, 1),
    thrift.NewTField("ex2", thrift.STRUCT, 2),
    })
}

/**
 * Attributes:
 *  - Ticket
 *  - Cards
 */
type PassCardsArgs struct {
  thrift.TStruct
  Ticket *Ticket "ticket"; // 1
  Cards thrift.TList "cards"; // 2
}

func NewPassCardsArgs() *PassCardsArgs {
  output := &PassCardsArgs{
    TStruct:thrift.NewTStruct("pass_cards_args", []thrift.TField{
    thrift.NewTField("ticket", thrift.STRUCT, 1),
    thrift.NewTField("cards", thrift.LIST, 2),
    }),
  }
  {
  }
  return output
}

func (p *PassCardsArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "ticket" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "cards" {
      if fieldTypeId == thrift.LIST {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *PassCardsArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.Ticket = NewTicket()
  err143 := p.Ticket.Read(iprot)
  if err143 != nil { return thrift.NewTProtocolExceptionReadStruct("p.TicketTicket", err143); }
  return err
}

func (p *PassCardsArgs) ReadFieldTicket(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *PassCardsArgs) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _etype149, _size146, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.NewTProtocolExceptionReadField(-1, "p.Cards", "", err)
  }
  p.Cards = thrift.NewTList(_etype149, _size146)
  for _i150:= 0; _i150 < _size146; _i150++ {
    _elem151 := NewCard()
    err154 := _elem151.Read(iprot)
    if err154 != nil { return thrift.NewTProtocolExceptionReadStruct("_elem151Card", err154); }
    p.Cards.Push(_elem151)
  }
  err = iprot.ReadListEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadField(-1, "", "list",err); }
  return err
}

func (p *PassCardsArgs) ReadFieldCards(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *PassCardsArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("pass_cards_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *PassCardsArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.Ticket != nil {
    err = oprot.WriteFieldBegin("ticket", thrift.STRUCT, 1)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "ticket", p.ThriftName(), err); }
    err = p.Ticket.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("Ticket", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "ticket", p.ThriftName(), err); }
  }
  return err
}

func (p *PassCardsArgs) WriteFieldTicket(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *PassCardsArgs) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.Cards != nil {
    err = oprot.WriteFieldBegin("cards", thrift.LIST, 2)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "cards", p.ThriftName(), err); }
    err = oprot.WriteListBegin(thrift.STRUCT, p.Cards.Len())
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err); }
    for Iter155 := range p.Cards.Iter() {
      Iter156 := Iter155.(*Card)
      err = Iter156.Write(oprot)
      if err != nil { return thrift.NewTProtocolExceptionWriteStruct("Card", err); }
    }
    err = oprot.WriteListEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "cards", p.ThriftName(), err); }
  }
  return err
}

func (p *PassCardsArgs) WriteFieldCards(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *PassCardsArgs) TStructName() string {
  return "PassCardsArgs"
}

func (p *PassCardsArgs) ThriftName() string {
  return "pass_cards_args"
}

func (p *PassCardsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("PassCardsArgs(%+v)", *p)
}

func (p *PassCardsArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*PassCardsArgs)
  if !ok {
    return 0, false
  }
  if cmp, ok := p.Ticket.CompareTo(data.Ticket); !ok || cmp != 0 {
    return cmp, ok
  }
  if cmp, ok := p.Cards.CompareTo(data.Cards); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *PassCardsArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p.Ticket
  case 2: return p.Cards
  }
  return nil
}

func (p *PassCardsArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("ticket", thrift.STRUCT, 1),
    thrift.NewTField("cards", thrift.LIST, 2),
    })
}

/**
 * Attributes:
 *  - Success
 *  - Ex1
 *  - Ex2
 *  - Ex3
 */
type PassCardsResult struct {
  thrift.TStruct
  Success thrift.TList "success"; // 0
  Ex1 *OutOfSequenceException "ex1"; // 1
  Ex2 *InvalidMoveException "ex2"; // 2
  Ex3 *GameAbortedException "ex3"; // 3
}

func NewPassCardsResult() *PassCardsResult {
  output := &PassCardsResult{
    TStruct:thrift.NewTStruct("pass_cards_result", []thrift.TField{
    thrift.NewTField("success", thrift.LIST, 0),
    thrift.NewTField("ex1", thrift.STRUCT, 1),
    thrift.NewTField("ex2", thrift.STRUCT, 2),
    thrift.NewTField("ex3", thrift.STRUCT, 3),
    }),
  }
  {
  }
  return output
}

func (p *PassCardsResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 0 || fieldName == "success" {
      if fieldTypeId == thrift.LIST {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 1 || fieldName == "ex1" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "ex2" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 3 || fieldName == "ex3" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *PassCardsResult) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _etype162, _size159, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.NewTProtocolExceptionReadField(-1, "p.Success", "", err)
  }
  p.Success = thrift.NewTList(_etype162, _size159)
  for _i163:= 0; _i163 < _size159; _i163++ {
    _elem164 := NewCard()
    err167 := _elem164.Read(iprot)
    if err167 != nil { return thrift.NewTProtocolExceptionReadStruct("_elem164Card", err167); }
    p.Success.Push(_elem164)
  }
  err = iprot.ReadListEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadField(-1, "", "list",err); }
  return err
}

func (p *PassCardsResult) ReadFieldSuccess(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField0(iprot)
}

func (p *PassCardsResult) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.Ex1 = NewOutOfSequenceException()
  err170 := p.Ex1.Read(iprot)
  if err170 != nil { return thrift.NewTProtocolExceptionReadStruct("p.Ex1OutOfSequenceException", err170); }
  return err
}

func (p *PassCardsResult) ReadFieldEx1(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *PassCardsResult) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.Ex2 = NewInvalidMoveException()
  err173 := p.Ex2.Read(iprot)
  if err173 != nil { return thrift.NewTProtocolExceptionReadStruct("p.Ex2InvalidMoveException", err173); }
  return err
}

func (p *PassCardsResult) ReadFieldEx2(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *PassCardsResult) ReadField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.Ex3 = NewGameAbortedException()
  err176 := p.Ex3.Read(iprot)
  if err176 != nil { return thrift.NewTProtocolExceptionReadStruct("p.Ex3GameAbortedException", err176); }
  return err
}

func (p *PassCardsResult) ReadFieldEx3(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField3(iprot)
}

func (p *PassCardsResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("pass_cards_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  switch {
  case p.Ex3 != nil:
    if err = p.WriteField3(oprot); err != nil {
      return err
    }
  case p.Ex2 != nil:
    if err = p.WriteField2(oprot); err != nil {
      return err
    }
  case p.Ex1 != nil:
    if err = p.WriteField1(oprot); err != nil {
      return err
    }
  default:
    if err = p.WriteField0(oprot); err != nil {
      return err
    }
  }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *PassCardsResult) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.Success != nil {
    err = oprot.WriteFieldBegin("success", thrift.LIST, 0)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
    err = oprot.WriteListBegin(thrift.STRUCT, p.Success.Len())
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err); }
    for Iter177 := range p.Success.Iter() {
      Iter178 := Iter177.(*Card)
      err = Iter178.Write(oprot)
      if err != nil { return thrift.NewTProtocolExceptionWriteStruct("Card", err); }
    }
    err = oprot.WriteListEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  }
  return err
}

func (p *PassCardsResult) WriteFieldSuccess(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField0(oprot)
}

func (p *PassCardsResult) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.Ex1 != nil {
    err = oprot.WriteFieldBegin("ex1", thrift.STRUCT, 1)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "ex1", p.ThriftName(), err); }
    err = p.Ex1.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("OutOfSequenceException", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "ex1", p.ThriftName(), err); }
  }
  return err
}

func (p *PassCardsResult) WriteFieldEx1(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *PassCardsResult) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.Ex2 != nil {
    err = oprot.WriteFieldBegin("ex2", thrift.STRUCT, 2)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "ex2", p.ThriftName(), err); }
    err = p.Ex2.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("InvalidMoveException", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "ex2", p.ThriftName(), err); }
  }
  return err
}

func (p *PassCardsResult) WriteFieldEx2(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *PassCardsResult) WriteField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.Ex3 != nil {
    err = oprot.WriteFieldBegin("ex3", thrift.STRUCT, 3)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "ex3", p.ThriftName(), err); }
    err = p.Ex3.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("GameAbortedException", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "ex3", p.ThriftName(), err); }
  }
  return err
}

func (p *PassCardsResult) WriteFieldEx3(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField3(oprot)
}

func (p *PassCardsResult) TStructName() string {
  return "PassCardsResult"
}

func (p *PassCardsResult) ThriftName() string {
  return "pass_cards_result"
}

func (p *PassCardsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("PassCardsResult(%+v)", *p)
}

func (p *PassCardsResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*PassCardsResult)
  if !ok {
    return 0, false
  }
  if cmp, ok := p.Success.CompareTo(data.Success); !ok || cmp != 0 {
    return cmp, ok
  }
  if cmp, ok := p.Ex1.CompareTo(data.Ex1); !ok || cmp != 0 {
    return cmp, ok
  }
  if cmp, ok := p.Ex2.CompareTo(data.Ex2); !ok || cmp != 0 {
    return cmp, ok
  }
  if cmp, ok := p.Ex3.CompareTo(data.Ex3); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *PassCardsResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 0: return p.Success
  case 1: return p.Ex1
  case 2: return p.Ex2
  case 3: return p.Ex3
  }
  return nil
}

func (p *PassCardsResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("success", thrift.LIST, 0),
    thrift.NewTField("ex1", thrift.STRUCT, 1),
    thrift.NewTField("ex2", thrift.STRUCT, 2),
    thrift.NewTField("ex3", thrift.STRUCT, 3),
    })
}

/**
 * Attributes:
 *  - Ticket
 */
type GetTrickArgs struct {
  thrift.TStruct
  Ticket *Ticket "ticket"; // 1
}

func NewGetTrickArgs() *GetTrickArgs {
  output := &GetTrickArgs{
    TStruct:thrift.NewTStruct("get_trick_args", []thrift.TField{
    thrift.NewTField("ticket", thrift.STRUCT, 1),
    }),
  }
  {
  }
  return output
}

func (p *GetTrickArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "ticket" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *GetTrickArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.Ticket = NewTicket()
  err181 := p.Ticket.Read(iprot)
  if err181 != nil { return thrift.NewTProtocolExceptionReadStruct("p.TicketTicket", err181); }
  return err
}

func (p *GetTrickArgs) ReadFieldTicket(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *GetTrickArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("get_trick_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *GetTrickArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.Ticket != nil {
    err = oprot.WriteFieldBegin("ticket", thrift.STRUCT, 1)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "ticket", p.ThriftName(), err); }
    err = p.Ticket.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("Ticket", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "ticket", p.ThriftName(), err); }
  }
  return err
}

func (p *GetTrickArgs) WriteFieldTicket(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *GetTrickArgs) TStructName() string {
  return "GetTrickArgs"
}

func (p *GetTrickArgs) ThriftName() string {
  return "get_trick_args"
}

func (p *GetTrickArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetTrickArgs(%+v)", *p)
}

func (p *GetTrickArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*GetTrickArgs)
  if !ok {
    return 0, false
  }
  if cmp, ok := p.Ticket.CompareTo(data.Ticket); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *GetTrickArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p.Ticket
  }
  return nil
}

func (p *GetTrickArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("ticket", thrift.STRUCT, 1),
    })
}

/**
 * Attributes:
 *  - Success
 *  - Ex1
 *  - Ex3
 */
type GetTrickResult struct {
  thrift.TStruct
  Success *Trick "success"; // 0
  Ex1 *OutOfSequenceException "ex1"; // 1
  Ex3 *GameAbortedException "ex3"; // 2
}

func NewGetTrickResult() *GetTrickResult {
  output := &GetTrickResult{
    TStruct:thrift.NewTStruct("get_trick_result", []thrift.TField{
    thrift.NewTField("success", thrift.STRUCT, 0),
    thrift.NewTField("ex1", thrift.STRUCT, 1),
    thrift.NewTField("ex3", thrift.STRUCT, 2),
    }),
  }
  {
  }
  return output
}

func (p *GetTrickResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 0 || fieldName == "success" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 1 || fieldName == "ex1" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "ex3" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *GetTrickResult) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.Success = NewTrick()
  err184 := p.Success.Read(iprot)
  if err184 != nil { return thrift.NewTProtocolExceptionReadStruct("p.SuccessTrick", err184); }
  return err
}

func (p *GetTrickResult) ReadFieldSuccess(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField0(iprot)
}

func (p *GetTrickResult) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.Ex1 = NewOutOfSequenceException()
  err187 := p.Ex1.Read(iprot)
  if err187 != nil { return thrift.NewTProtocolExceptionReadStruct("p.Ex1OutOfSequenceException", err187); }
  return err
}

func (p *GetTrickResult) ReadFieldEx1(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *GetTrickResult) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.Ex3 = NewGameAbortedException()
  err190 := p.Ex3.Read(iprot)
  if err190 != nil { return thrift.NewTProtocolExceptionReadStruct("p.Ex3GameAbortedException", err190); }
  return err
}

func (p *GetTrickResult) ReadFieldEx3(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *GetTrickResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("get_trick_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  switch {
  case p.Ex3 != nil:
    if err = p.WriteField2(oprot); err != nil {
      return err
    }
  case p.Ex1 != nil:
    if err = p.WriteField1(oprot); err != nil {
      return err
    }
  default:
    if err = p.WriteField0(oprot); err != nil {
      return err
    }
  }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *GetTrickResult) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.Success != nil {
    err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
    err = p.Success.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("Trick", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  }
  return err
}

func (p *GetTrickResult) WriteFieldSuccess(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField0(oprot)
}

func (p *GetTrickResult) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.Ex1 != nil {
    err = oprot.WriteFieldBegin("ex1", thrift.STRUCT, 1)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "ex1", p.ThriftName(), err); }
    err = p.Ex1.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("OutOfSequenceException", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "ex1", p.ThriftName(), err); }
  }
  return err
}

func (p *GetTrickResult) WriteFieldEx1(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *GetTrickResult) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.Ex3 != nil {
    err = oprot.WriteFieldBegin("ex3", thrift.STRUCT, 2)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "ex3", p.ThriftName(), err); }
    err = p.Ex3.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("GameAbortedException", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "ex3", p.ThriftName(), err); }
  }
  return err
}

func (p *GetTrickResult) WriteFieldEx3(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *GetTrickResult) TStructName() string {
  return "GetTrickResult"
}

func (p *GetTrickResult) ThriftName() string {
  return "get_trick_result"
}

func (p *GetTrickResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetTrickResult(%+v)", *p)
}

func (p *GetTrickResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*GetTrickResult)
  if !ok {
    return 0, false
  }
  if cmp, ok := p.Success.CompareTo(data.Success); !ok || cmp != 0 {
    return cmp, ok
  }
  if cmp, ok := p.Ex1.CompareTo(data.Ex1); !ok || cmp != 0 {
    return cmp, ok
  }
  if cmp, ok := p.Ex3.CompareTo(data.Ex3); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *GetTrickResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 0: return p.Success
  case 1: return p.Ex1
  case 2: return p.Ex3
  }
  return nil
}

func (p *GetTrickResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("success", thrift.STRUCT, 0),
    thrift.NewTField("ex1", thrift.STRUCT, 1),
    thrift.NewTField("ex3", thrift.STRUCT, 2),
    })
}

/**
 * Attributes:
 *  - Ticket
 *  - Card
 */
type PlayCardArgs struct {
  thrift.TStruct
  Ticket *Ticket "ticket"; // 1
  Card *Card "card"; // 2
}

func NewPlayCardArgs() *PlayCardArgs {
  output := &PlayCardArgs{
    TStruct:thrift.NewTStruct("play_card_args", []thrift.TField{
    thrift.NewTField("ticket", thrift.STRUCT, 1),
    thrift.NewTField("card", thrift.STRUCT, 2),
    }),
  }
  {
  }
  return output
}

func (p *PlayCardArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "ticket" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "card" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *PlayCardArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.Ticket = NewTicket()
  err193 := p.Ticket.Read(iprot)
  if err193 != nil { return thrift.NewTProtocolExceptionReadStruct("p.TicketTicket", err193); }
  return err
}

func (p *PlayCardArgs) ReadFieldTicket(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *PlayCardArgs) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.Card = NewCard()
  err196 := p.Card.Read(iprot)
  if err196 != nil { return thrift.NewTProtocolExceptionReadStruct("p.CardCard", err196); }
  return err
}

func (p *PlayCardArgs) ReadFieldCard(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *PlayCardArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("play_card_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *PlayCardArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.Ticket != nil {
    err = oprot.WriteFieldBegin("ticket", thrift.STRUCT, 1)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "ticket", p.ThriftName(), err); }
    err = p.Ticket.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("Ticket", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "ticket", p.ThriftName(), err); }
  }
  return err
}

func (p *PlayCardArgs) WriteFieldTicket(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *PlayCardArgs) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.Card != nil {
    err = oprot.WriteFieldBegin("card", thrift.STRUCT, 2)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "card", p.ThriftName(), err); }
    err = p.Card.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("Card", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "card", p.ThriftName(), err); }
  }
  return err
}

func (p *PlayCardArgs) WriteFieldCard(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *PlayCardArgs) TStructName() string {
  return "PlayCardArgs"
}

func (p *PlayCardArgs) ThriftName() string {
  return "play_card_args"
}

func (p *PlayCardArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("PlayCardArgs(%+v)", *p)
}

func (p *PlayCardArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*PlayCardArgs)
  if !ok {
    return 0, false
  }
  if cmp, ok := p.Ticket.CompareTo(data.Ticket); !ok || cmp != 0 {
    return cmp, ok
  }
  if cmp, ok := p.Card.CompareTo(data.Card); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *PlayCardArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p.Ticket
  case 2: return p.Card
  }
  return nil
}

func (p *PlayCardArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("ticket", thrift.STRUCT, 1),
    thrift.NewTField("card", thrift.STRUCT, 2),
    })
}

/**
 * Attributes:
 *  - Success
 *  - Ex1
 *  - Ex2
 *  - Ex3
 */
type PlayCardResult struct {
  thrift.TStruct
  Success *Trick "success"; // 0
  Ex1 *OutOfSequenceException "ex1"; // 1
  Ex2 *InvalidMoveException "ex2"; // 2
  Ex3 *GameAbortedException "ex3"; // 3
}

func NewPlayCardResult() *PlayCardResult {
  output := &PlayCardResult{
    TStruct:thrift.NewTStruct("play_card_result", []thrift.TField{
    thrift.NewTField("success", thrift.STRUCT, 0),
    thrift.NewTField("ex1", thrift.STRUCT, 1),
    thrift.NewTField("ex2", thrift.STRUCT, 2),
    thrift.NewTField("ex3", thrift.STRUCT, 3),
    }),
  }
  {
  }
  return output
}

func (p *PlayCardResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 0 || fieldName == "success" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 1 || fieldName == "ex1" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "ex2" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 3 || fieldName == "ex3" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *PlayCardResult) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.Success = NewTrick()
  err199 := p.Success.Read(iprot)
  if err199 != nil { return thrift.NewTProtocolExceptionReadStruct("p.SuccessTrick", err199); }
  return err
}

func (p *PlayCardResult) ReadFieldSuccess(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField0(iprot)
}

func (p *PlayCardResult) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.Ex1 = NewOutOfSequenceException()
  err202 := p.Ex1.Read(iprot)
  if err202 != nil { return thrift.NewTProtocolExceptionReadStruct("p.Ex1OutOfSequenceException", err202); }
  return err
}

func (p *PlayCardResult) ReadFieldEx1(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *PlayCardResult) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.Ex2 = NewInvalidMoveException()
  err205 := p.Ex2.Read(iprot)
  if err205 != nil { return thrift.NewTProtocolExceptionReadStruct("p.Ex2InvalidMoveException", err205); }
  return err
}

func (p *PlayCardResult) ReadFieldEx2(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *PlayCardResult) ReadField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.Ex3 = NewGameAbortedException()
  err208 := p.Ex3.Read(iprot)
  if err208 != nil { return thrift.NewTProtocolExceptionReadStruct("p.Ex3GameAbortedException", err208); }
  return err
}

func (p *PlayCardResult) ReadFieldEx3(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField3(iprot)
}

func (p *PlayCardResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("play_card_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  switch {
  case p.Ex3 != nil:
    if err = p.WriteField3(oprot); err != nil {
      return err
    }
  case p.Ex2 != nil:
    if err = p.WriteField2(oprot); err != nil {
      return err
    }
  case p.Ex1 != nil:
    if err = p.WriteField1(oprot); err != nil {
      return err
    }
  default:
    if err = p.WriteField0(oprot); err != nil {
      return err
    }
  }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *PlayCardResult) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.Success != nil {
    err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
    err = p.Success.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("Trick", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  }
  return err
}

func (p *PlayCardResult) WriteFieldSuccess(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField0(oprot)
}

func (p *PlayCardResult) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.Ex1 != nil {
    err = oprot.WriteFieldBegin("ex1", thrift.STRUCT, 1)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "ex1", p.ThriftName(), err); }
    err = p.Ex1.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("OutOfSequenceException", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "ex1", p.ThriftName(), err); }
  }
  return err
}

func (p *PlayCardResult) WriteFieldEx1(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *PlayCardResult) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.Ex2 != nil {
    err = oprot.WriteFieldBegin("ex2", thrift.STRUCT, 2)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "ex2", p.ThriftName(), err); }
    err = p.Ex2.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("InvalidMoveException", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "ex2", p.ThriftName(), err); }
  }
  return err
}

func (p *PlayCardResult) WriteFieldEx2(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *PlayCardResult) WriteField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.Ex3 != nil {
    err = oprot.WriteFieldBegin("ex3", thrift.STRUCT, 3)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "ex3", p.ThriftName(), err); }
    err = p.Ex3.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("GameAbortedException", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "ex3", p.ThriftName(), err); }
  }
  return err
}

func (p *PlayCardResult) WriteFieldEx3(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField3(oprot)
}

func (p *PlayCardResult) TStructName() string {
  return "PlayCardResult"
}

func (p *PlayCardResult) ThriftName() string {
  return "play_card_result"
}

func (p *PlayCardResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("PlayCardResult(%+v)", *p)
}

func (p *PlayCardResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*PlayCardResult)
  if !ok {
    return 0, false
  }
  if cmp, ok := p.Success.CompareTo(data.Success); !ok || cmp != 0 {
    return cmp, ok
  }
  if cmp, ok := p.Ex1.CompareTo(data.Ex1); !ok || cmp != 0 {
    return cmp, ok
  }
  if cmp, ok := p.Ex2.CompareTo(data.Ex2); !ok || cmp != 0 {
    return cmp, ok
  }
  if cmp, ok := p.Ex3.CompareTo(data.Ex3); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *PlayCardResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 0: return p.Success
  case 1: return p.Ex1
  case 2: return p.Ex2
  case 3: return p.Ex3
  }
  return nil
}

func (p *PlayCardResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("success", thrift.STRUCT, 0),
    thrift.NewTField("ex1", thrift.STRUCT, 1),
    thrift.NewTField("ex2", thrift.STRUCT, 2),
    thrift.NewTField("ex3", thrift.STRUCT, 3),
    })
}

/**
 * Attributes:
 *  - Ticket
 */
type GetRoundResultArgs struct {
  thrift.TStruct
  Ticket *Ticket "ticket"; // 1
}

func NewGetRoundResultArgs() *GetRoundResultArgs {
  output := &GetRoundResultArgs{
    TStruct:thrift.NewTStruct("get_round_result_args", []thrift.TField{
    thrift.NewTField("ticket", thrift.STRUCT, 1),
    }),
  }
  {
  }
  return output
}

func (p *GetRoundResultArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "ticket" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *GetRoundResultArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.Ticket = NewTicket()
  err211 := p.Ticket.Read(iprot)
  if err211 != nil { return thrift.NewTProtocolExceptionReadStruct("p.TicketTicket", err211); }
  return err
}

func (p *GetRoundResultArgs) ReadFieldTicket(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *GetRoundResultArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("get_round_result_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *GetRoundResultArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.Ticket != nil {
    err = oprot.WriteFieldBegin("ticket", thrift.STRUCT, 1)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "ticket", p.ThriftName(), err); }
    err = p.Ticket.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("Ticket", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "ticket", p.ThriftName(), err); }
  }
  return err
}

func (p *GetRoundResultArgs) WriteFieldTicket(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *GetRoundResultArgs) TStructName() string {
  return "GetRoundResultArgs"
}

func (p *GetRoundResultArgs) ThriftName() string {
  return "get_round_result_args"
}

func (p *GetRoundResultArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetRoundResultArgs(%+v)", *p)
}

func (p *GetRoundResultArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*GetRoundResultArgs)
  if !ok {
    return 0, false
  }
  if cmp, ok := p.Ticket.CompareTo(data.Ticket); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *GetRoundResultArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p.Ticket
  }
  return nil
}

func (p *GetRoundResultArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("ticket", thrift.STRUCT, 1),
    })
}

/**
 * Attributes:
 *  - Success
 *  - Ex1
 *  - Ex3
 */
type GetRoundResultResult struct {
  thrift.TStruct
  Success *RoundResult "success"; // 0
  Ex1 *OutOfSequenceException "ex1"; // 1
  Ex3 *GameAbortedException "ex3"; // 2
}

func NewGetRoundResultResult() *GetRoundResultResult {
  output := &GetRoundResultResult{
    TStruct:thrift.NewTStruct("get_round_result_result", []thrift.TField{
    thrift.NewTField("success", thrift.STRUCT, 0),
    thrift.NewTField("ex1", thrift.STRUCT, 1),
    thrift.NewTField("ex3", thrift.STRUCT, 2),
    }),
  }
  {
  }
  return output
}

func (p *GetRoundResultResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 0 || fieldName == "success" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 1 || fieldName == "ex1" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "ex3" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *GetRoundResultResult) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.Success = NewRoundResult()
  err214 := p.Success.Read(iprot)
  if err214 != nil { return thrift.NewTProtocolExceptionReadStruct("p.SuccessRoundResult", err214); }
  return err
}

func (p *GetRoundResultResult) ReadFieldSuccess(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField0(iprot)
}

func (p *GetRoundResultResult) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.Ex1 = NewOutOfSequenceException()
  err217 := p.Ex1.Read(iprot)
  if err217 != nil { return thrift.NewTProtocolExceptionReadStruct("p.Ex1OutOfSequenceException", err217); }
  return err
}

func (p *GetRoundResultResult) ReadFieldEx1(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *GetRoundResultResult) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.Ex3 = NewGameAbortedException()
  err220 := p.Ex3.Read(iprot)
  if err220 != nil { return thrift.NewTProtocolExceptionReadStruct("p.Ex3GameAbortedException", err220); }
  return err
}

func (p *GetRoundResultResult) ReadFieldEx3(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *GetRoundResultResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("get_round_result_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  switch {
  case p.Ex3 != nil:
    if err = p.WriteField2(oprot); err != nil {
      return err
    }
  case p.Ex1 != nil:
    if err = p.WriteField1(oprot); err != nil {
      return err
    }
  default:
    if err = p.WriteField0(oprot); err != nil {
      return err
    }
  }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *GetRoundResultResult) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.Success != nil {
    err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
    err = p.Success.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("RoundResult", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  }
  return err
}

func (p *GetRoundResultResult) WriteFieldSuccess(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField0(oprot)
}

func (p *GetRoundResultResult) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.Ex1 != nil {
    err = oprot.WriteFieldBegin("ex1", thrift.STRUCT, 1)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "ex1", p.ThriftName(), err); }
    err = p.Ex1.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("OutOfSequenceException", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "ex1", p.ThriftName(), err); }
  }
  return err
}

func (p *GetRoundResultResult) WriteFieldEx1(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *GetRoundResultResult) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.Ex3 != nil {
    err = oprot.WriteFieldBegin("ex3", thrift.STRUCT, 2)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "ex3", p.ThriftName(), err); }
    err = p.Ex3.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("GameAbortedException", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "ex3", p.ThriftName(), err); }
  }
  return err
}

func (p *GetRoundResultResult) WriteFieldEx3(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *GetRoundResultResult) TStructName() string {
  return "GetRoundResultResult"
}

func (p *GetRoundResultResult) ThriftName() string {
  return "get_round_result_result"
}

func (p *GetRoundResultResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetRoundResultResult(%+v)", *p)
}

func (p *GetRoundResultResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*GetRoundResultResult)
  if !ok {
    return 0, false
  }
  if cmp, ok := p.Success.CompareTo(data.Success); !ok || cmp != 0 {
    return cmp, ok
  }
  if cmp, ok := p.Ex1.CompareTo(data.Ex1); !ok || cmp != 0 {
    return cmp, ok
  }
  if cmp, ok := p.Ex3.CompareTo(data.Ex3); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *GetRoundResultResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 0: return p.Success
  case 1: return p.Ex1
  case 2: return p.Ex3
  }
  return nil
}

func (p *GetRoundResultResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("success", thrift.STRUCT, 0),
    thrift.NewTField("ex1", thrift.STRUCT, 1),
    thrift.NewTField("ex3", thrift.STRUCT, 2),
    })
}

/**
 * Attributes:
 *  - Ticket
 */
type GetGameResultArgs struct {
  thrift.TStruct
  Ticket *Ticket "ticket"; // 1
}

func NewGetGameResultArgs() *GetGameResultArgs {
  output := &GetGameResultArgs{
    TStruct:thrift.NewTStruct("get_game_result_args", []thrift.TField{
    thrift.NewTField("ticket", thrift.STRUCT, 1),
    }),
  }
  {
  }
  return output
}

func (p *GetGameResultArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "ticket" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *GetGameResultArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.Ticket = NewTicket()
  err223 := p.Ticket.Read(iprot)
  if err223 != nil { return thrift.NewTProtocolExceptionReadStruct("p.TicketTicket", err223); }
  return err
}

func (p *GetGameResultArgs) ReadFieldTicket(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *GetGameResultArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("get_game_result_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *GetGameResultArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.Ticket != nil {
    err = oprot.WriteFieldBegin("ticket", thrift.STRUCT, 1)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "ticket", p.ThriftName(), err); }
    err = p.Ticket.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("Ticket", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "ticket", p.ThriftName(), err); }
  }
  return err
}

func (p *GetGameResultArgs) WriteFieldTicket(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *GetGameResultArgs) TStructName() string {
  return "GetGameResultArgs"
}

func (p *GetGameResultArgs) ThriftName() string {
  return "get_game_result_args"
}

func (p *GetGameResultArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetGameResultArgs(%+v)", *p)
}

func (p *GetGameResultArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*GetGameResultArgs)
  if !ok {
    return 0, false
  }
  if cmp, ok := p.Ticket.CompareTo(data.Ticket); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *GetGameResultArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p.Ticket
  }
  return nil
}

func (p *GetGameResultArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("ticket", thrift.STRUCT, 1),
    })
}

/**
 * Attributes:
 *  - Success
 *  - Ex1
 *  - Ex3
 */
type GetGameResultResult struct {
  thrift.TStruct
  Success *GameResult "success"; // 0
  Ex1 *OutOfSequenceException "ex1"; // 1
  Ex3 *GameAbortedException "ex3"; // 2
}

func NewGetGameResultResult() *GetGameResultResult {
  output := &GetGameResultResult{
    TStruct:thrift.NewTStruct("get_game_result_result", []thrift.TField{
    thrift.NewTField("success", thrift.STRUCT, 0),
    thrift.NewTField("ex1", thrift.STRUCT, 1),
    thrift.NewTField("ex3", thrift.STRUCT, 2),
    }),
  }
  {
  }
  return output
}

func (p *GetGameResultResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 0 || fieldName == "success" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 1 || fieldName == "ex1" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "ex3" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *GetGameResultResult) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.Success = NewGameResult()
  err226 := p.Success.Read(iprot)
  if err226 != nil { return thrift.NewTProtocolExceptionReadStruct("p.SuccessGameResult", err226); }
  return err
}

func (p *GetGameResultResult) ReadFieldSuccess(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField0(iprot)
}

func (p *GetGameResultResult) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.Ex1 = NewOutOfSequenceException()
  err229 := p.Ex1.Read(iprot)
  if err229 != nil { return thrift.NewTProtocolExceptionReadStruct("p.Ex1OutOfSequenceException", err229); }
  return err
}

func (p *GetGameResultResult) ReadFieldEx1(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *GetGameResultResult) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.Ex3 = NewGameAbortedException()
  err232 := p.Ex3.Read(iprot)
  if err232 != nil { return thrift.NewTProtocolExceptionReadStruct("p.Ex3GameAbortedException", err232); }
  return err
}

func (p *GetGameResultResult) ReadFieldEx3(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *GetGameResultResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("get_game_result_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  switch {
  case p.Ex3 != nil:
    if err = p.WriteField2(oprot); err != nil {
      return err
    }
  case p.Ex1 != nil:
    if err = p.WriteField1(oprot); err != nil {
      return err
    }
  default:
    if err = p.WriteField0(oprot); err != nil {
      return err
    }
  }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *GetGameResultResult) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.Success != nil {
    err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
    err = p.Success.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("GameResult", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  }
  return err
}

func (p *GetGameResultResult) WriteFieldSuccess(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField0(oprot)
}

func (p *GetGameResultResult) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.Ex1 != nil {
    err = oprot.WriteFieldBegin("ex1", thrift.STRUCT, 1)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "ex1", p.ThriftName(), err); }
    err = p.Ex1.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("OutOfSequenceException", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "ex1", p.ThriftName(), err); }
  }
  return err
}

func (p *GetGameResultResult) WriteFieldEx1(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *GetGameResultResult) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.Ex3 != nil {
    err = oprot.WriteFieldBegin("ex3", thrift.STRUCT, 2)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "ex3", p.ThriftName(), err); }
    err = p.Ex3.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("GameAbortedException", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "ex3", p.ThriftName(), err); }
  }
  return err
}

func (p *GetGameResultResult) WriteFieldEx3(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *GetGameResultResult) TStructName() string {
  return "GetGameResultResult"
}

func (p *GetGameResultResult) ThriftName() string {
  return "get_game_result_result"
}

func (p *GetGameResultResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetGameResultResult(%+v)", *p)
}

func (p *GetGameResultResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*GetGameResultResult)
  if !ok {
    return 0, false
  }
  if cmp, ok := p.Success.CompareTo(data.Success); !ok || cmp != 0 {
    return cmp, ok
  }
  if cmp, ok := p.Ex1.CompareTo(data.Ex1); !ok || cmp != 0 {
    return cmp, ok
  }
  if cmp, ok := p.Ex3.CompareTo(data.Ex3); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *GetGameResultResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 0: return p.Success
  case 1: return p.Ex1
  case 2: return p.Ex3
  }
  return nil
}

func (p *GetGameResultResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("success", thrift.STRUCT, 0),
    thrift.NewTField("ex1", thrift.STRUCT, 1),
    thrift.NewTField("ex3", thrift.STRUCT, 2),
    })
}


