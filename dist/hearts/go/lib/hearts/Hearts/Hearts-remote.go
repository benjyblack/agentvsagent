/* Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package main

import (
        "flag"
        "fmt"
        "http"
        "net"
        "os"
        "strconv"
        "thrift"
        "thriftlib/hearts"
)

func Usage() {
  fmt.Fprint(os.Stderr, "Usage of ", os.Args[0], " [-h host:port] [-u url] [-f[ramed]] function [arg1 [arg2...]]:\n")
  flag.PrintDefaults()
  fmt.Fprint(os.Stderr, "Functions:\n")
  fmt.Fprint(os.Stderr, "  enter_arena() (retval136 *EntryResponse, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  get_game_info(ticket *Ticket) (retval137 *GameInfo, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  get_hand(ticket *Ticket) (retval138 thrift.TList, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  pass_cards(ticket *Ticket, cards thrift.TList) (retval139 thrift.TList, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  get_trick(ticket *Ticket) (retval140 *Trick, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  play_card(ticket *Ticket, card *Card) (retval141 *Trick, err os.Error)\n")
  fmt.Fprint(os.Stderr, "\n")
  os.Exit(0)
}

func main() {
  flag.Usage = Usage
  var host string
  var port int
  var protocol string
  var urlString string
  var framed bool
  var useHttp bool
  var help bool
  var url http.URL
  var trans thrift.TTransport
  flag.Usage = Usage
  flag.StringVar(&host, "h", "localhost", "Specify host and port")
  flag.IntVar(&port, "p", 9090, "Specify port")
  flag.StringVar(&protocol, "P", "binary", "Specify the protocol (binary, compact, simplejson, json)")
  flag.StringVar(&urlString, "u", "", "Specify the url")
  flag.BoolVar(&framed, "framed", false, "Use framed transport")
  flag.BoolVar(&useHttp, "http", false, "Use http")
  flag.BoolVar(&help, "help", false, "See usage string")
  flag.Parse()
  if help || flag.NArg() == 0 {
    flag.Usage()
  }
  
  if len(urlString) > 0 {
    url, err := http.ParseURL(urlString)
    if err != nil {
      fmt.Fprint(os.Stderr, "Error parsing URL: ", err.String(), "\n")
      flag.Usage()
    }
    host = url.Host
    useHttp = len(url.Scheme) <= 0 || url.Scheme == "http"
  } else if useHttp {
    _, err := http.ParseURL(fmt.Sprint("http://", host, ":", port))
    if err != nil {
      fmt.Fprint(os.Stderr, "Error parsing URL: ", err.String(), "\n")
      flag.Usage()
    }
  }
  
  cmd := flag.Arg(0)
  var err os.Error
  if useHttp {
    trans, err = thrift.NewTHttpClient(url.Raw)
  } else {
    addr, err := net.ResolveTCPAddr("tcp", fmt.Sprint(host, ":", port))
    if err != nil {
      fmt.Fprint(os.Stderr, "Error resolving address", err.String())
      os.Exit(1)
    }
    trans, err = thrift.NewTNonblockingSocketAddr(addr)
    if framed {
      trans = thrift.NewTFramedTransport(trans)
    }
  }
  if err != nil {
    fmt.Fprint(os.Stderr, "Error creating transport", err.String())
    os.Exit(1)
  }
  defer trans.Close()
  var protocolFactory thrift.TProtocolFactory
  switch protocol {
  case "compact":
    protocolFactory = thrift.NewTCompactProtocolFactory()
    break
  case "simplejson":
    protocolFactory = thrift.NewTSimpleJSONProtocolFactory()
    break
  case "json":
    protocolFactory = thrift.NewTJSONProtocolFactory()
    break
  case "binary", "":
    protocolFactory = thrift.NewTBinaryProtocolFactoryDefault()
    break
  default:
    fmt.Fprint(os.Stderr, "Invalid protocol specified: ", protocol, "\n")
    Usage()
    os.Exit(1)
  }
  client := hearts.NewHeartsClientFactory(trans, protocolFactory)
  if err = trans.Open(); err != nil {
    fmt.Fprint(os.Stderr, "Error opening socket to ", host, ":", port, " ", err.String())
    os.Exit(1)
  }
  
  switch cmd {
  case "enter_arena":
    if flag.NArg() - 1 != 0 {
      fmt.Fprint(os.Stderr, "EnterArena requires 0 args\n")
      flag.Usage()
    }
    fmt.Print(client.EnterArena())
    fmt.Print("\n")
    break
  case "get_game_info":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "GetGameInfo requires 1 args\n")
      flag.Usage()
    }
    arg142 := flag.Arg(1)
    mbTrans143 := thrift.NewTMemoryBufferLen(len(arg142))
    defer mbTrans143.Close()
    _, err144 := mbTrans143.WriteString(arg142)
    if err144 != nil {
      Usage()
      return
    }
    factory145 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt146 := factory145.GetProtocol(mbTrans143)
    argvalue0 := hearts.NewTicket()
    err147 := argvalue0.Read(jsProt146)
    if err147 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetGameInfo(value0))
    fmt.Print("\n")
    break
  case "get_hand":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "GetHand requires 1 args\n")
      flag.Usage()
    }
    arg148 := flag.Arg(1)
    mbTrans149 := thrift.NewTMemoryBufferLen(len(arg148))
    defer mbTrans149.Close()
    _, err150 := mbTrans149.WriteString(arg148)
    if err150 != nil {
      Usage()
      return
    }
    factory151 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt152 := factory151.GetProtocol(mbTrans149)
    argvalue0 := hearts.NewTicket()
    err153 := argvalue0.Read(jsProt152)
    if err153 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetHand(value0))
    fmt.Print("\n")
    break
  case "pass_cards":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "PassCards requires 2 args\n")
      flag.Usage()
    }
    arg154 := flag.Arg(1)
    mbTrans155 := thrift.NewTMemoryBufferLen(len(arg154))
    defer mbTrans155.Close()
    _, err156 := mbTrans155.WriteString(arg154)
    if err156 != nil {
      Usage()
      return
    }
    factory157 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt158 := factory157.GetProtocol(mbTrans155)
    argvalue0 := hearts.NewTicket()
    err159 := argvalue0.Read(jsProt158)
    if err159 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg160 := flag.Arg(2)
    mbTrans161 := thrift.NewTMemoryBufferLen(len(arg160))
    defer mbTrans161.Close()
    _, err162 := mbTrans161.WriteString(arg160)
    if err162 != nil { 
      Usage()
      return
    }
    factory163 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt164 := factory163.GetProtocol(mbTrans161)
    containerStruct1 := hearts.NewPassCardsArgs()
    err165 := containerStruct1.ReadField2(jsProt164)
    if err165 != nil {
      Usage()
      return
    }
    argvalue1 := containerStruct1.Cards
    value1 := argvalue1
    fmt.Print(client.PassCards(value0, value1))
    fmt.Print("\n")
    break
  case "get_trick":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "GetTrick requires 1 args\n")
      flag.Usage()
    }
    arg166 := flag.Arg(1)
    mbTrans167 := thrift.NewTMemoryBufferLen(len(arg166))
    defer mbTrans167.Close()
    _, err168 := mbTrans167.WriteString(arg166)
    if err168 != nil {
      Usage()
      return
    }
    factory169 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt170 := factory169.GetProtocol(mbTrans167)
    argvalue0 := hearts.NewTicket()
    err171 := argvalue0.Read(jsProt170)
    if err171 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetTrick(value0))
    fmt.Print("\n")
    break
  case "play_card":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "PlayCard requires 2 args\n")
      flag.Usage()
    }
    arg172 := flag.Arg(1)
    mbTrans173 := thrift.NewTMemoryBufferLen(len(arg172))
    defer mbTrans173.Close()
    _, err174 := mbTrans173.WriteString(arg172)
    if err174 != nil {
      Usage()
      return
    }
    factory175 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt176 := factory175.GetProtocol(mbTrans173)
    argvalue0 := hearts.NewTicket()
    err177 := argvalue0.Read(jsProt176)
    if err177 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg178 := flag.Arg(2)
    mbTrans179 := thrift.NewTMemoryBufferLen(len(arg178))
    defer mbTrans179.Close()
    _, err180 := mbTrans179.WriteString(arg178)
    if err180 != nil {
      Usage()
      return
    }
    factory181 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt182 := factory181.GetProtocol(mbTrans179)
    argvalue1 := hearts.NewCard()
    err183 := argvalue1.Read(jsProt182)
    if err183 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.PlayCard(value0, value1))
    fmt.Print("\n")
    break
  case "":
    Usage()
    break
  default:
    fmt.Fprint(os.Stderr, "Invalid function ", cmd, "\n")
  }
}
