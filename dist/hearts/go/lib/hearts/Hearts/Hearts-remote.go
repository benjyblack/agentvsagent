/* Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package main

import (
        "flag"
        "fmt"
        "http"
        "net"
        "os"
        "strconv"
        "thrift"
        "thriftlib/hearts"
)

func Usage() {
  fmt.Fprint(os.Stderr, "Usage of ", os.Args[0], " [-h host:port] [-u url] [-f[ramed]] function [arg1 [arg2...]]:\n")
  flag.PrintDefaults()
  fmt.Fprint(os.Stderr, "Functions:\n")
  fmt.Fprint(os.Stderr, "  enter_arena(request *EntryRequest) (retval233 *EntryResponse, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  get_game_info(ticket *Ticket) (retval234 *GameInfo, ex1 *GameAbortedException, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  get_hand(ticket *Ticket) (retval235 thrift.TList, ex1 *OutOfSequenceException, ex2 *GameAbortedException, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  pass_cards(ticket *Ticket, cards thrift.TList) (retval236 thrift.TList, ex1 *OutOfSequenceException, ex2 *InvalidMoveException, ex3 *GameAbortedException, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  get_trick(ticket *Ticket) (retval237 *Trick, ex1 *OutOfSequenceException, ex3 *GameAbortedException, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  play_card(ticket *Ticket, card *Card) (retval238 *Trick, ex1 *OutOfSequenceException, ex2 *InvalidMoveException, ex3 *GameAbortedException, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  get_round_result(ticket *Ticket) (retval239 *RoundResult, ex1 *OutOfSequenceException, ex3 *GameAbortedException, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  get_game_result(ticket *Ticket) (retval240 *GameResult, ex1 *OutOfSequenceException, ex3 *GameAbortedException, err os.Error)\n")
  fmt.Fprint(os.Stderr, "\n")
  os.Exit(0)
}

func main() {
  flag.Usage = Usage
  var host string
  var port int
  var protocol string
  var urlString string
  var framed bool
  var useHttp bool
  var help bool
  var url http.URL
  var trans thrift.TTransport
  flag.Usage = Usage
  flag.StringVar(&host, "h", "localhost", "Specify host and port")
  flag.IntVar(&port, "p", 9090, "Specify port")
  flag.StringVar(&protocol, "P", "binary", "Specify the protocol (binary, compact, simplejson, json)")
  flag.StringVar(&urlString, "u", "", "Specify the url")
  flag.BoolVar(&framed, "framed", false, "Use framed transport")
  flag.BoolVar(&useHttp, "http", false, "Use http")
  flag.BoolVar(&help, "help", false, "See usage string")
  flag.Parse()
  if help || flag.NArg() == 0 {
    flag.Usage()
  }
  
  if len(urlString) > 0 {
    url, err := http.ParseURL(urlString)
    if err != nil {
      fmt.Fprint(os.Stderr, "Error parsing URL: ", err.String(), "\n")
      flag.Usage()
    }
    host = url.Host
    useHttp = len(url.Scheme) <= 0 || url.Scheme == "http"
  } else if useHttp {
    _, err := http.ParseURL(fmt.Sprint("http://", host, ":", port))
    if err != nil {
      fmt.Fprint(os.Stderr, "Error parsing URL: ", err.String(), "\n")
      flag.Usage()
    }
  }
  
  cmd := flag.Arg(0)
  var err os.Error
  if useHttp {
    trans, err = thrift.NewTHttpClient(url.Raw)
  } else {
    addr, err := net.ResolveTCPAddr("tcp", fmt.Sprint(host, ":", port))
    if err != nil {
      fmt.Fprint(os.Stderr, "Error resolving address", err.String())
      os.Exit(1)
    }
    trans, err = thrift.NewTNonblockingSocketAddr(addr)
    if framed {
      trans = thrift.NewTFramedTransport(trans)
    }
  }
  if err != nil {
    fmt.Fprint(os.Stderr, "Error creating transport", err.String())
    os.Exit(1)
  }
  defer trans.Close()
  var protocolFactory thrift.TProtocolFactory
  switch protocol {
  case "compact":
    protocolFactory = thrift.NewTCompactProtocolFactory()
    break
  case "simplejson":
    protocolFactory = thrift.NewTSimpleJSONProtocolFactory()
    break
  case "json":
    protocolFactory = thrift.NewTJSONProtocolFactory()
    break
  case "binary", "":
    protocolFactory = thrift.NewTBinaryProtocolFactoryDefault()
    break
  default:
    fmt.Fprint(os.Stderr, "Invalid protocol specified: ", protocol, "\n")
    Usage()
    os.Exit(1)
  }
  client := hearts.NewHeartsClientFactory(trans, protocolFactory)
  if err = trans.Open(); err != nil {
    fmt.Fprint(os.Stderr, "Error opening socket to ", host, ":", port, " ", err.String())
    os.Exit(1)
  }
  
  switch cmd {
  case "enter_arena":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "EnterArena requires 1 args\n")
      flag.Usage()
    }
    arg241 := flag.Arg(1)
    mbTrans242 := thrift.NewTMemoryBufferLen(len(arg241))
    defer mbTrans242.Close()
    _, err243 := mbTrans242.WriteString(arg241)
    if err243 != nil {
      Usage()
      return
    }
    factory244 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt245 := factory244.GetProtocol(mbTrans242)
    argvalue0 := hearts.NewEntryRequest()
    err246 := argvalue0.Read(jsProt245)
    if err246 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.EnterArena(value0))
    fmt.Print("\n")
    break
  case "get_game_info":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "GetGameInfo requires 1 args\n")
      flag.Usage()
    }
    arg247 := flag.Arg(1)
    mbTrans248 := thrift.NewTMemoryBufferLen(len(arg247))
    defer mbTrans248.Close()
    _, err249 := mbTrans248.WriteString(arg247)
    if err249 != nil {
      Usage()
      return
    }
    factory250 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt251 := factory250.GetProtocol(mbTrans248)
    argvalue0 := hearts.NewTicket()
    err252 := argvalue0.Read(jsProt251)
    if err252 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetGameInfo(value0))
    fmt.Print("\n")
    break
  case "get_hand":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "GetHand requires 1 args\n")
      flag.Usage()
    }
    arg253 := flag.Arg(1)
    mbTrans254 := thrift.NewTMemoryBufferLen(len(arg253))
    defer mbTrans254.Close()
    _, err255 := mbTrans254.WriteString(arg253)
    if err255 != nil {
      Usage()
      return
    }
    factory256 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt257 := factory256.GetProtocol(mbTrans254)
    argvalue0 := hearts.NewTicket()
    err258 := argvalue0.Read(jsProt257)
    if err258 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetHand(value0))
    fmt.Print("\n")
    break
  case "pass_cards":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "PassCards requires 2 args\n")
      flag.Usage()
    }
    arg259 := flag.Arg(1)
    mbTrans260 := thrift.NewTMemoryBufferLen(len(arg259))
    defer mbTrans260.Close()
    _, err261 := mbTrans260.WriteString(arg259)
    if err261 != nil {
      Usage()
      return
    }
    factory262 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt263 := factory262.GetProtocol(mbTrans260)
    argvalue0 := hearts.NewTicket()
    err264 := argvalue0.Read(jsProt263)
    if err264 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg265 := flag.Arg(2)
    mbTrans266 := thrift.NewTMemoryBufferLen(len(arg265))
    defer mbTrans266.Close()
    _, err267 := mbTrans266.WriteString(arg265)
    if err267 != nil { 
      Usage()
      return
    }
    factory268 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt269 := factory268.GetProtocol(mbTrans266)
    containerStruct1 := hearts.NewPassCardsArgs()
    err270 := containerStruct1.ReadField2(jsProt269)
    if err270 != nil {
      Usage()
      return
    }
    argvalue1 := containerStruct1.Cards
    value1 := argvalue1
    fmt.Print(client.PassCards(value0, value1))
    fmt.Print("\n")
    break
  case "get_trick":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "GetTrick requires 1 args\n")
      flag.Usage()
    }
    arg271 := flag.Arg(1)
    mbTrans272 := thrift.NewTMemoryBufferLen(len(arg271))
    defer mbTrans272.Close()
    _, err273 := mbTrans272.WriteString(arg271)
    if err273 != nil {
      Usage()
      return
    }
    factory274 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt275 := factory274.GetProtocol(mbTrans272)
    argvalue0 := hearts.NewTicket()
    err276 := argvalue0.Read(jsProt275)
    if err276 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetTrick(value0))
    fmt.Print("\n")
    break
  case "play_card":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "PlayCard requires 2 args\n")
      flag.Usage()
    }
    arg277 := flag.Arg(1)
    mbTrans278 := thrift.NewTMemoryBufferLen(len(arg277))
    defer mbTrans278.Close()
    _, err279 := mbTrans278.WriteString(arg277)
    if err279 != nil {
      Usage()
      return
    }
    factory280 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt281 := factory280.GetProtocol(mbTrans278)
    argvalue0 := hearts.NewTicket()
    err282 := argvalue0.Read(jsProt281)
    if err282 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg283 := flag.Arg(2)
    mbTrans284 := thrift.NewTMemoryBufferLen(len(arg283))
    defer mbTrans284.Close()
    _, err285 := mbTrans284.WriteString(arg283)
    if err285 != nil {
      Usage()
      return
    }
    factory286 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt287 := factory286.GetProtocol(mbTrans284)
    argvalue1 := hearts.NewCard()
    err288 := argvalue1.Read(jsProt287)
    if err288 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.PlayCard(value0, value1))
    fmt.Print("\n")
    break
  case "get_round_result":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "GetRoundResult requires 1 args\n")
      flag.Usage()
    }
    arg289 := flag.Arg(1)
    mbTrans290 := thrift.NewTMemoryBufferLen(len(arg289))
    defer mbTrans290.Close()
    _, err291 := mbTrans290.WriteString(arg289)
    if err291 != nil {
      Usage()
      return
    }
    factory292 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt293 := factory292.GetProtocol(mbTrans290)
    argvalue0 := hearts.NewTicket()
    err294 := argvalue0.Read(jsProt293)
    if err294 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetRoundResult(value0))
    fmt.Print("\n")
    break
  case "get_game_result":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "GetGameResult requires 1 args\n")
      flag.Usage()
    }
    arg295 := flag.Arg(1)
    mbTrans296 := thrift.NewTMemoryBufferLen(len(arg295))
    defer mbTrans296.Close()
    _, err297 := mbTrans296.WriteString(arg295)
    if err297 != nil {
      Usage()
      return
    }
    factory298 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt299 := factory298.GetProtocol(mbTrans296)
    argvalue0 := hearts.NewTicket()
    err300 := argvalue0.Read(jsProt299)
    if err300 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetGameResult(value0))
    fmt.Print("\n")
    break
  case "":
    Usage()
    break
  default:
    fmt.Fprint(os.Stderr, "Invalid function ", cmd, "\n")
  }
}
