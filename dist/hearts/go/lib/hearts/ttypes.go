/* Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package hearts;

import (
        "thrift"
        "fmt"
)



type Suit int
const (
  CLUBS Suit = 21
  DIAMONDS Suit = 22
  SPADES Suit = 23
  HEARTS Suit = 24
)
func (p Suit) String() string {
  switch p {
  case CLUBS: return "CLUBS"
  case DIAMONDS: return "DIAMONDS"
  case SPADES: return "SPADES"
  case HEARTS: return "HEARTS"
  }
  return ""
}

func FromSuitString(s string) Suit {
  switch s {
  case "CLUBS": return CLUBS
  case "DIAMONDS": return DIAMONDS
  case "SPADES": return SPADES
  case "HEARTS": return HEARTS
  }
  return Suit(-10000)
}

func (p Suit) Value() int {
  return int(p)
}

func (p Suit) IsEnum() bool {
  return true
}

type Rank int
const (
  TWO Rank = 2
  THREE Rank = 3
  FOUR Rank = 4
  FIVE Rank = 5
  SIX Rank = 6
  SEVEN Rank = 7
  EIGHT Rank = 8
  NINE Rank = 9
  TEN Rank = 10
  JACK Rank = 11
  QUEEN Rank = 12
  KING Rank = 13
  ACE Rank = 14
)
func (p Rank) String() string {
  switch p {
  case TWO: return "TWO"
  case THREE: return "THREE"
  case FOUR: return "FOUR"
  case FIVE: return "FIVE"
  case SIX: return "SIX"
  case SEVEN: return "SEVEN"
  case EIGHT: return "EIGHT"
  case NINE: return "NINE"
  case TEN: return "TEN"
  case JACK: return "JACK"
  case QUEEN: return "QUEEN"
  case KING: return "KING"
  case ACE: return "ACE"
  }
  return ""
}

func FromRankString(s string) Rank {
  switch s {
  case "TWO": return TWO
  case "THREE": return THREE
  case "FOUR": return FOUR
  case "FIVE": return FIVE
  case "SIX": return SIX
  case "SEVEN": return SEVEN
  case "EIGHT": return EIGHT
  case "NINE": return NINE
  case "TEN": return TEN
  case "JACK": return JACK
  case "QUEEN": return QUEEN
  case "KING": return KING
  case "ACE": return ACE
  }
  return Rank(-10000)
}

func (p Rank) Value() int {
  return int(p)
}

func (p Rank) IsEnum() bool {
  return true
}

type GameStatus int
const (
  NEXT_ROUND GameStatus = 1
  END_GAME GameStatus = 2
)
func (p GameStatus) String() string {
  switch p {
  case NEXT_ROUND: return "NEXT_ROUND"
  case END_GAME: return "END_GAME"
  }
  return ""
}

func FromGameStatusString(s string) GameStatus {
  switch s {
  case "NEXT_ROUND": return NEXT_ROUND
  case "END_GAME": return END_GAME
  }
  return GameStatus(-10000)
}

func (p GameStatus) Value() int {
  return int(p)
}

func (p GameStatus) IsEnum() bool {
  return true
}

type Position string

type Score int32

/**
 * Attributes:
 *  - Suit
 *  - Rank
 */
type Card struct {
  thrift.TStruct
  Suit Suit "suit"; // 1
  Rank Rank "rank"; // 2
}

func NewCard() *Card {
  output := &Card{
    TStruct:thrift.NewTStruct("Card", []thrift.TField{
    thrift.NewTField("suit", thrift.I32, 1),
    thrift.NewTField("rank", thrift.I32, 2),
    }),
  }
  {
  }
  return output
}

func (p *Card) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "suit" {
      if fieldTypeId == thrift.I32 {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "rank" {
      if fieldTypeId == thrift.I32 {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *Card) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v0, err1 := iprot.ReadI32()
  if err1 != nil { return thrift.NewTProtocolExceptionReadField(1, "suit", p.ThriftName(), err1); }
  p.Suit = Suit(v0)
  return err
}

func (p *Card) ReadFieldSuit(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *Card) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v2, err3 := iprot.ReadI32()
  if err3 != nil { return thrift.NewTProtocolExceptionReadField(2, "rank", p.ThriftName(), err3); }
  p.Rank = Rank(v2)
  return err
}

func (p *Card) ReadFieldRank(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *Card) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("Card")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *Card) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("suit", thrift.I32, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "suit", p.ThriftName(), err); }
  err = oprot.WriteI32(int32(p.Suit))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "suit", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "suit", p.ThriftName(), err); }
  return err
}

func (p *Card) WriteFieldSuit(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *Card) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("rank", thrift.I32, 2)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "rank", p.ThriftName(), err); }
  err = oprot.WriteI32(int32(p.Rank))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "rank", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "rank", p.ThriftName(), err); }
  return err
}

func (p *Card) WriteFieldRank(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *Card) TStructName() string {
  return "Card"
}

func (p *Card) ThriftName() string {
  return "Card"
}

func (p *Card) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Card(%+v)", *p)
}

func (p *Card) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*Card)
  if !ok {
    return 0, false
  }
  if p.Suit != data.Suit {
    if p.Suit < data.Suit {
      return -1, true
    }
    return 1, true
  }
  if p.Rank != data.Rank {
    if p.Rank < data.Rank {
      return -1, true
    }
    return 1, true
  }
  return 0, true
}

func (p *Card) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p.Suit
  case 2: return p.Rank
  }
  return nil
}

func (p *Card) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("suit", thrift.I32, 1),
    thrift.NewTField("rank", thrift.I32, 2),
    })
}

/**
 * Attributes:
 *  - AgentId
 */
type Ticket struct {
  thrift.TStruct
  AgentId string "agentId"; // 1
}

func NewTicket() *Ticket {
  output := &Ticket{
    TStruct:thrift.NewTStruct("Ticket", []thrift.TField{
    thrift.NewTField("agentId", thrift.STRING, 1),
    }),
  }
  {
  }
  return output
}

func (p *Ticket) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "agentId" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *Ticket) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v4, err5 := iprot.ReadString()
  if err5 != nil { return thrift.NewTProtocolExceptionReadField(1, "agentId", p.ThriftName(), err5); }
  p.AgentId = v4
  return err
}

func (p *Ticket) ReadFieldAgentId(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *Ticket) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("Ticket")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *Ticket) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("agentId", thrift.STRING, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "agentId", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.AgentId))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "agentId", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "agentId", p.ThriftName(), err); }
  return err
}

func (p *Ticket) WriteFieldAgentId(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *Ticket) TStructName() string {
  return "Ticket"
}

func (p *Ticket) ThriftName() string {
  return "Ticket"
}

func (p *Ticket) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Ticket(%+v)", *p)
}

func (p *Ticket) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*Ticket)
  if !ok {
    return 0, false
  }
  if p.AgentId != data.AgentId {
    if p.AgentId < data.AgentId {
      return -1, true
    }
    return 1, true
  }
  return 0, true
}

func (p *Ticket) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p.AgentId
  }
  return nil
}

func (p *Ticket) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("agentId", thrift.STRING, 1),
    })
}

/**
 * Attributes:
 *  - Version
 */
type EntryRequest struct {
  thrift.TStruct
  Version string "version"; // 1
}

func NewEntryRequest() *EntryRequest {
  output := &EntryRequest{
    TStruct:thrift.NewTStruct("EntryRequest", []thrift.TField{
    thrift.NewTField("version", thrift.STRING, 1),
    }),
  }
  {
    output.Version = "0.0.13"
  }
  return output
}

func (p *EntryRequest) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "version" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *EntryRequest) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v6, err7 := iprot.ReadString()
  if err7 != nil { return thrift.NewTProtocolExceptionReadField(1, "version", p.ThriftName(), err7); }
  p.Version = v6
  return err
}

func (p *EntryRequest) ReadFieldVersion(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *EntryRequest) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("EntryRequest")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *EntryRequest) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("version", thrift.STRING, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "version", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.Version))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "version", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "version", p.ThriftName(), err); }
  return err
}

func (p *EntryRequest) WriteFieldVersion(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *EntryRequest) TStructName() string {
  return "EntryRequest"
}

func (p *EntryRequest) ThriftName() string {
  return "EntryRequest"
}

func (p *EntryRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("EntryRequest(%+v)", *p)
}

func (p *EntryRequest) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*EntryRequest)
  if !ok {
    return 0, false
  }
  if p.Version != data.Version {
    if p.Version < data.Version {
      return -1, true
    }
    return 1, true
  }
  return 0, true
}

func (p *EntryRequest) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p.Version
  }
  return nil
}

func (p *EntryRequest) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("version", thrift.STRING, 1),
    })
}

/**
 * Attributes:
 *  - Ticket
 *  - Message
 */
type EntryResponse struct {
  thrift.TStruct
  Ticket *Ticket "ticket"; // 1
  Message string "message"; // 2
}

func NewEntryResponse() *EntryResponse {
  output := &EntryResponse{
    TStruct:thrift.NewTStruct("EntryResponse", []thrift.TField{
    thrift.NewTField("ticket", thrift.STRUCT, 1),
    thrift.NewTField("message", thrift.STRING, 2),
    }),
  }
  {
  }
  return output
}

func (p *EntryResponse) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "ticket" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "message" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *EntryResponse) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.Ticket = NewTicket()
  err10 := p.Ticket.Read(iprot)
  if err10 != nil { return thrift.NewTProtocolExceptionReadStruct("p.TicketTicket", err10); }
  return err
}

func (p *EntryResponse) ReadFieldTicket(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *EntryResponse) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v11, err12 := iprot.ReadString()
  if err12 != nil { return thrift.NewTProtocolExceptionReadField(2, "message", p.ThriftName(), err12); }
  p.Message = v11
  return err
}

func (p *EntryResponse) ReadFieldMessage(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *EntryResponse) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("EntryResponse")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *EntryResponse) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.Ticket != nil {
    err = oprot.WriteFieldBegin("ticket", thrift.STRUCT, 1)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "ticket", p.ThriftName(), err); }
    err = p.Ticket.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("Ticket", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "ticket", p.ThriftName(), err); }
  }
  return err
}

func (p *EntryResponse) WriteFieldTicket(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *EntryResponse) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("message", thrift.STRING, 2)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "message", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.Message))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "message", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "message", p.ThriftName(), err); }
  return err
}

func (p *EntryResponse) WriteFieldMessage(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *EntryResponse) TStructName() string {
  return "EntryResponse"
}

func (p *EntryResponse) ThriftName() string {
  return "EntryResponse"
}

func (p *EntryResponse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("EntryResponse(%+v)", *p)
}

func (p *EntryResponse) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*EntryResponse)
  if !ok {
    return 0, false
  }
  if cmp, ok := p.Ticket.CompareTo(data.Ticket); !ok || cmp != 0 {
    return cmp, ok
  }
  if p.Message != data.Message {
    if p.Message < data.Message {
      return -1, true
    }
    return 1, true
  }
  return 0, true
}

func (p *EntryResponse) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p.Ticket
  case 2: return p.Message
  }
  return nil
}

func (p *EntryResponse) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("ticket", thrift.STRUCT, 1),
    thrift.NewTField("message", thrift.STRING, 2),
    })
}

/**
 * Attributes:
 *  - Position
 */
type GameInfo struct {
  thrift.TStruct
  Position Position "position"; // 1
}

func NewGameInfo() *GameInfo {
  output := &GameInfo{
    TStruct:thrift.NewTStruct("GameInfo", []thrift.TField{
    thrift.NewTField("position", thrift.STRING, 1),
    }),
  }
  {
  }
  return output
}

func (p *GameInfo) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "position" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *GameInfo) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v13, err14 := iprot.ReadString()
  if err14 != nil { return thrift.NewTProtocolExceptionReadField(1, "position", p.ThriftName(), err14); }
  p.Position = Position(v13)
  return err
}

func (p *GameInfo) ReadFieldPosition(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *GameInfo) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("GameInfo")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *GameInfo) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("position", thrift.STRING, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "position", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.Position))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "position", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "position", p.ThriftName(), err); }
  return err
}

func (p *GameInfo) WriteFieldPosition(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *GameInfo) TStructName() string {
  return "GameInfo"
}

func (p *GameInfo) ThriftName() string {
  return "GameInfo"
}

func (p *GameInfo) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GameInfo(%+v)", *p)
}

func (p *GameInfo) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*GameInfo)
  if !ok {
    return 0, false
  }
  if p.Position != data.Position {
    if p.Position < data.Position {
      return -1, true
    }
    return 1, true
  }
  return 0, true
}

func (p *GameInfo) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p.Position
  }
  return nil
}

func (p *GameInfo) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("position", thrift.STRING, 1),
    })
}

/**
 * Attributes:
 *  - Leader
 *  - Played
 */
type Trick struct {
  thrift.TStruct
  Leader Position "leader"; // 1
  Played thrift.TList "played"; // 2
}

func NewTrick() *Trick {
  output := &Trick{
    TStruct:thrift.NewTStruct("Trick", []thrift.TField{
    thrift.NewTField("leader", thrift.STRING, 1),
    thrift.NewTField("played", thrift.LIST, 2),
    }),
  }
  {
  }
  return output
}

func (p *Trick) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "leader" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "played" {
      if fieldTypeId == thrift.LIST {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *Trick) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v15, err16 := iprot.ReadString()
  if err16 != nil { return thrift.NewTProtocolExceptionReadField(1, "leader", p.ThriftName(), err16); }
  p.Leader = Position(v15)
  return err
}

func (p *Trick) ReadFieldLeader(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *Trick) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _etype22, _size19, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.NewTProtocolExceptionReadField(-1, "p.Played", "", err)
  }
  p.Played = thrift.NewTList(_etype22, _size19)
  for _i23:= 0; _i23 < _size19; _i23++ {
    _elem24 := NewCard()
    err27 := _elem24.Read(iprot)
    if err27 != nil { return thrift.NewTProtocolExceptionReadStruct("_elem24Card", err27); }
    p.Played.Push(_elem24)
  }
  err = iprot.ReadListEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadField(-1, "", "list",err); }
  return err
}

func (p *Trick) ReadFieldPlayed(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *Trick) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("Trick")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *Trick) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("leader", thrift.STRING, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "leader", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.Leader))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "leader", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "leader", p.ThriftName(), err); }
  return err
}

func (p *Trick) WriteFieldLeader(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *Trick) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.Played != nil {
    err = oprot.WriteFieldBegin("played", thrift.LIST, 2)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "played", p.ThriftName(), err); }
    err = oprot.WriteListBegin(thrift.STRUCT, p.Played.Len())
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err); }
    for Iter28 := range p.Played.Iter() {
      Iter29 := Iter28.(*Card)
      err = Iter29.Write(oprot)
      if err != nil { return thrift.NewTProtocolExceptionWriteStruct("Card", err); }
    }
    err = oprot.WriteListEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "played", p.ThriftName(), err); }
  }
  return err
}

func (p *Trick) WriteFieldPlayed(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *Trick) TStructName() string {
  return "Trick"
}

func (p *Trick) ThriftName() string {
  return "Trick"
}

func (p *Trick) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Trick(%+v)", *p)
}

func (p *Trick) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*Trick)
  if !ok {
    return 0, false
  }
  if p.Leader != data.Leader {
    if p.Leader < data.Leader {
      return -1, true
    }
    return 1, true
  }
  if cmp, ok := p.Played.CompareTo(data.Played); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *Trick) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p.Leader
  case 2: return p.Played
  }
  return nil
}

func (p *Trick) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("leader", thrift.STRING, 1),
    thrift.NewTField("played", thrift.LIST, 2),
    })
}

/**
 * Attributes:
 *  - North
 *  - East
 *  - South
 *  - West
 *  - Status
 */
type RoundResult struct {
  thrift.TStruct
  North Score "north"; // 1
  East Score "east"; // 2
  South Score "south"; // 3
  West Score "west"; // 4
  Status GameStatus "status"; // 5
}

func NewRoundResult() *RoundResult {
  output := &RoundResult{
    TStruct:thrift.NewTStruct("RoundResult", []thrift.TField{
    thrift.NewTField("north", thrift.I32, 1),
    thrift.NewTField("east", thrift.I32, 2),
    thrift.NewTField("south", thrift.I32, 3),
    thrift.NewTField("west", thrift.I32, 4),
    thrift.NewTField("status", thrift.I32, 5),
    }),
  }
  {
  }
  return output
}

func (p *RoundResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "north" {
      if fieldTypeId == thrift.I32 {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "east" {
      if fieldTypeId == thrift.I32 {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 3 || fieldName == "south" {
      if fieldTypeId == thrift.I32 {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 4 || fieldName == "west" {
      if fieldTypeId == thrift.I32 {
        err = p.ReadField4(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField4(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 5 || fieldName == "status" {
      if fieldTypeId == thrift.I32 {
        err = p.ReadField5(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField5(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *RoundResult) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v30, err31 := iprot.ReadI32()
  if err31 != nil { return thrift.NewTProtocolExceptionReadField(1, "north", p.ThriftName(), err31); }
  p.North = Score(v30)
  return err
}

func (p *RoundResult) ReadFieldNorth(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *RoundResult) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v32, err33 := iprot.ReadI32()
  if err33 != nil { return thrift.NewTProtocolExceptionReadField(2, "east", p.ThriftName(), err33); }
  p.East = Score(v32)
  return err
}

func (p *RoundResult) ReadFieldEast(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *RoundResult) ReadField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v34, err35 := iprot.ReadI32()
  if err35 != nil { return thrift.NewTProtocolExceptionReadField(3, "south", p.ThriftName(), err35); }
  p.South = Score(v34)
  return err
}

func (p *RoundResult) ReadFieldSouth(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField3(iprot)
}

func (p *RoundResult) ReadField4(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v36, err37 := iprot.ReadI32()
  if err37 != nil { return thrift.NewTProtocolExceptionReadField(4, "west", p.ThriftName(), err37); }
  p.West = Score(v36)
  return err
}

func (p *RoundResult) ReadFieldWest(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField4(iprot)
}

func (p *RoundResult) ReadField5(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v38, err39 := iprot.ReadI32()
  if err39 != nil { return thrift.NewTProtocolExceptionReadField(5, "status", p.ThriftName(), err39); }
  p.Status = GameStatus(v38)
  return err
}

func (p *RoundResult) ReadFieldStatus(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField5(iprot)
}

func (p *RoundResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("RoundResult")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = p.WriteField3(oprot)
  if err != nil { return err }
  err = p.WriteField4(oprot)
  if err != nil { return err }
  err = p.WriteField5(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *RoundResult) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("north", thrift.I32, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "north", p.ThriftName(), err); }
  err = oprot.WriteI32(int32(p.North))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "north", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "north", p.ThriftName(), err); }
  return err
}

func (p *RoundResult) WriteFieldNorth(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *RoundResult) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("east", thrift.I32, 2)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "east", p.ThriftName(), err); }
  err = oprot.WriteI32(int32(p.East))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "east", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "east", p.ThriftName(), err); }
  return err
}

func (p *RoundResult) WriteFieldEast(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *RoundResult) WriteField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("south", thrift.I32, 3)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "south", p.ThriftName(), err); }
  err = oprot.WriteI32(int32(p.South))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "south", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "south", p.ThriftName(), err); }
  return err
}

func (p *RoundResult) WriteFieldSouth(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField3(oprot)
}

func (p *RoundResult) WriteField4(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("west", thrift.I32, 4)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(4, "west", p.ThriftName(), err); }
  err = oprot.WriteI32(int32(p.West))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(4, "west", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(4, "west", p.ThriftName(), err); }
  return err
}

func (p *RoundResult) WriteFieldWest(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField4(oprot)
}

func (p *RoundResult) WriteField5(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("status", thrift.I32, 5)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(5, "status", p.ThriftName(), err); }
  err = oprot.WriteI32(int32(p.Status))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(5, "status", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(5, "status", p.ThriftName(), err); }
  return err
}

func (p *RoundResult) WriteFieldStatus(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField5(oprot)
}

func (p *RoundResult) TStructName() string {
  return "RoundResult"
}

func (p *RoundResult) ThriftName() string {
  return "RoundResult"
}

func (p *RoundResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("RoundResult(%+v)", *p)
}

func (p *RoundResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*RoundResult)
  if !ok {
    return 0, false
  }
  if p.North != data.North {
    if p.North < data.North {
      return -1, true
    }
    return 1, true
  }
  if p.East != data.East {
    if p.East < data.East {
      return -1, true
    }
    return 1, true
  }
  if p.South != data.South {
    if p.South < data.South {
      return -1, true
    }
    return 1, true
  }
  if p.West != data.West {
    if p.West < data.West {
      return -1, true
    }
    return 1, true
  }
  if p.Status != data.Status {
    if p.Status < data.Status {
      return -1, true
    }
    return 1, true
  }
  return 0, true
}

func (p *RoundResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p.North
  case 2: return p.East
  case 3: return p.South
  case 4: return p.West
  case 5: return p.Status
  }
  return nil
}

func (p *RoundResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("north", thrift.I32, 1),
    thrift.NewTField("east", thrift.I32, 2),
    thrift.NewTField("south", thrift.I32, 3),
    thrift.NewTField("west", thrift.I32, 4),
    thrift.NewTField("status", thrift.I32, 5),
    })
}

/**
 * Attributes:
 *  - North
 *  - East
 *  - South
 *  - West
 */
type GameResult struct {
  thrift.TStruct
  North Score "north"; // 1
  East Score "east"; // 2
  South Score "south"; // 3
  West Score "west"; // 4
}

func NewGameResult() *GameResult {
  output := &GameResult{
    TStruct:thrift.NewTStruct("GameResult", []thrift.TField{
    thrift.NewTField("north", thrift.I32, 1),
    thrift.NewTField("east", thrift.I32, 2),
    thrift.NewTField("south", thrift.I32, 3),
    thrift.NewTField("west", thrift.I32, 4),
    }),
  }
  {
  }
  return output
}

func (p *GameResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "north" {
      if fieldTypeId == thrift.I32 {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "east" {
      if fieldTypeId == thrift.I32 {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 3 || fieldName == "south" {
      if fieldTypeId == thrift.I32 {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 4 || fieldName == "west" {
      if fieldTypeId == thrift.I32 {
        err = p.ReadField4(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField4(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *GameResult) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v40, err41 := iprot.ReadI32()
  if err41 != nil { return thrift.NewTProtocolExceptionReadField(1, "north", p.ThriftName(), err41); }
  p.North = Score(v40)
  return err
}

func (p *GameResult) ReadFieldNorth(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *GameResult) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v42, err43 := iprot.ReadI32()
  if err43 != nil { return thrift.NewTProtocolExceptionReadField(2, "east", p.ThriftName(), err43); }
  p.East = Score(v42)
  return err
}

func (p *GameResult) ReadFieldEast(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *GameResult) ReadField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v44, err45 := iprot.ReadI32()
  if err45 != nil { return thrift.NewTProtocolExceptionReadField(3, "south", p.ThriftName(), err45); }
  p.South = Score(v44)
  return err
}

func (p *GameResult) ReadFieldSouth(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField3(iprot)
}

func (p *GameResult) ReadField4(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v46, err47 := iprot.ReadI32()
  if err47 != nil { return thrift.NewTProtocolExceptionReadField(4, "west", p.ThriftName(), err47); }
  p.West = Score(v46)
  return err
}

func (p *GameResult) ReadFieldWest(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField4(iprot)
}

func (p *GameResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("GameResult")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = p.WriteField3(oprot)
  if err != nil { return err }
  err = p.WriteField4(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *GameResult) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("north", thrift.I32, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "north", p.ThriftName(), err); }
  err = oprot.WriteI32(int32(p.North))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "north", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "north", p.ThriftName(), err); }
  return err
}

func (p *GameResult) WriteFieldNorth(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *GameResult) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("east", thrift.I32, 2)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "east", p.ThriftName(), err); }
  err = oprot.WriteI32(int32(p.East))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "east", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "east", p.ThriftName(), err); }
  return err
}

func (p *GameResult) WriteFieldEast(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *GameResult) WriteField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("south", thrift.I32, 3)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "south", p.ThriftName(), err); }
  err = oprot.WriteI32(int32(p.South))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "south", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "south", p.ThriftName(), err); }
  return err
}

func (p *GameResult) WriteFieldSouth(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField3(oprot)
}

func (p *GameResult) WriteField4(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("west", thrift.I32, 4)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(4, "west", p.ThriftName(), err); }
  err = oprot.WriteI32(int32(p.West))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(4, "west", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(4, "west", p.ThriftName(), err); }
  return err
}

func (p *GameResult) WriteFieldWest(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField4(oprot)
}

func (p *GameResult) TStructName() string {
  return "GameResult"
}

func (p *GameResult) ThriftName() string {
  return "GameResult"
}

func (p *GameResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GameResult(%+v)", *p)
}

func (p *GameResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*GameResult)
  if !ok {
    return 0, false
  }
  if p.North != data.North {
    if p.North < data.North {
      return -1, true
    }
    return 1, true
  }
  if p.East != data.East {
    if p.East < data.East {
      return -1, true
    }
    return 1, true
  }
  if p.South != data.South {
    if p.South < data.South {
      return -1, true
    }
    return 1, true
  }
  if p.West != data.West {
    if p.West < data.West {
      return -1, true
    }
    return 1, true
  }
  return 0, true
}

func (p *GameResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p.North
  case 2: return p.East
  case 3: return p.South
  case 4: return p.West
  }
  return nil
}

func (p *GameResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("north", thrift.I32, 1),
    thrift.NewTField("east", thrift.I32, 2),
    thrift.NewTField("south", thrift.I32, 3),
    thrift.NewTField("west", thrift.I32, 4),
    })
}

/**
 * Attributes:
 *  - Message
 */
type OutOfSequenceException struct {
  thrift.TStruct
  Message string "message"; // 1
}

func NewOutOfSequenceException() *OutOfSequenceException {
  output := &OutOfSequenceException{
    TStruct:thrift.NewTStruct("OutOfSequenceException", []thrift.TField{
    thrift.NewTField("message", thrift.STRING, 1),
    }),
  }
  {
  }
  return output
}

func (p *OutOfSequenceException) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "message" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *OutOfSequenceException) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v48, err49 := iprot.ReadString()
  if err49 != nil { return thrift.NewTProtocolExceptionReadField(1, "message", p.ThriftName(), err49); }
  p.Message = v48
  return err
}

func (p *OutOfSequenceException) ReadFieldMessage(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *OutOfSequenceException) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("OutOfSequenceException")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *OutOfSequenceException) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("message", thrift.STRING, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "message", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.Message))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "message", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "message", p.ThriftName(), err); }
  return err
}

func (p *OutOfSequenceException) WriteFieldMessage(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *OutOfSequenceException) TStructName() string {
  return "OutOfSequenceException"
}

func (p *OutOfSequenceException) ThriftName() string {
  return "OutOfSequenceException"
}

func (p *OutOfSequenceException) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("OutOfSequenceException(%+v)", *p)
}

func (p *OutOfSequenceException) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*OutOfSequenceException)
  if !ok {
    return 0, false
  }
  if p.Message != data.Message {
    if p.Message < data.Message {
      return -1, true
    }
    return 1, true
  }
  return 0, true
}

func (p *OutOfSequenceException) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p.Message
  }
  return nil
}

func (p *OutOfSequenceException) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("message", thrift.STRING, 1),
    })
}

/**
 * Attributes:
 *  - Message
 */
type InvalidMoveException struct {
  thrift.TStruct
  Message string "message"; // 1
}

func NewInvalidMoveException() *InvalidMoveException {
  output := &InvalidMoveException{
    TStruct:thrift.NewTStruct("InvalidMoveException", []thrift.TField{
    thrift.NewTField("message", thrift.STRING, 1),
    }),
  }
  {
  }
  return output
}

func (p *InvalidMoveException) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "message" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *InvalidMoveException) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v50, err51 := iprot.ReadString()
  if err51 != nil { return thrift.NewTProtocolExceptionReadField(1, "message", p.ThriftName(), err51); }
  p.Message = v50
  return err
}

func (p *InvalidMoveException) ReadFieldMessage(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *InvalidMoveException) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("InvalidMoveException")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *InvalidMoveException) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("message", thrift.STRING, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "message", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.Message))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "message", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "message", p.ThriftName(), err); }
  return err
}

func (p *InvalidMoveException) WriteFieldMessage(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *InvalidMoveException) TStructName() string {
  return "InvalidMoveException"
}

func (p *InvalidMoveException) ThriftName() string {
  return "InvalidMoveException"
}

func (p *InvalidMoveException) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("InvalidMoveException(%+v)", *p)
}

func (p *InvalidMoveException) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*InvalidMoveException)
  if !ok {
    return 0, false
  }
  if p.Message != data.Message {
    if p.Message < data.Message {
      return -1, true
    }
    return 1, true
  }
  return 0, true
}

func (p *InvalidMoveException) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p.Message
  }
  return nil
}

func (p *InvalidMoveException) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("message", thrift.STRING, 1),
    })
}

/**
 * Attributes:
 *  - Message
 */
type GameAbortedException struct {
  thrift.TStruct
  Message string "message"; // 1
}

func NewGameAbortedException() *GameAbortedException {
  output := &GameAbortedException{
    TStruct:thrift.NewTStruct("GameAbortedException", []thrift.TField{
    thrift.NewTField("message", thrift.STRING, 1),
    }),
  }
  {
  }
  return output
}

func (p *GameAbortedException) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "message" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *GameAbortedException) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v52, err53 := iprot.ReadString()
  if err53 != nil { return thrift.NewTProtocolExceptionReadField(1, "message", p.ThriftName(), err53); }
  p.Message = v52
  return err
}

func (p *GameAbortedException) ReadFieldMessage(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *GameAbortedException) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("GameAbortedException")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *GameAbortedException) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("message", thrift.STRING, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "message", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.Message))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "message", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "message", p.ThriftName(), err); }
  return err
}

func (p *GameAbortedException) WriteFieldMessage(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *GameAbortedException) TStructName() string {
  return "GameAbortedException"
}

func (p *GameAbortedException) ThriftName() string {
  return "GameAbortedException"
}

func (p *GameAbortedException) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GameAbortedException(%+v)", *p)
}

func (p *GameAbortedException) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*GameAbortedException)
  if !ok {
    return 0, false
  }
  if p.Message != data.Message {
    if p.Message < data.Message {
      return -1, true
    }
    return 1, true
  }
  return 0, true
}

func (p *GameAbortedException) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p.Message
  }
  return nil
}

func (p *GameAbortedException) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("message", thrift.STRING, 1),
    })
}

const CURRENTVERSION = "0.0.13"
func init() {
}

