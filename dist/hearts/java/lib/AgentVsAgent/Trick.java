/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package AgentVsAgent;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class Trick implements org.apache.thrift.TBase<Trick, Trick._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Trick");

  private static final org.apache.thrift.protocol.TField LEADER_FIELD_DESC = new org.apache.thrift.protocol.TField("leader", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField NORTH_FIELD_DESC = new org.apache.thrift.protocol.TField("north", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField EAST_FIELD_DESC = new org.apache.thrift.protocol.TField("east", org.apache.thrift.protocol.TType.STRUCT, (short)3);
  private static final org.apache.thrift.protocol.TField SOUTH_FIELD_DESC = new org.apache.thrift.protocol.TField("south", org.apache.thrift.protocol.TType.STRUCT, (short)4);
  private static final org.apache.thrift.protocol.TField WEST_FIELD_DESC = new org.apache.thrift.protocol.TField("west", org.apache.thrift.protocol.TType.STRUCT, (short)5);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TrickStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TrickTupleSchemeFactory());
  }

  /**
   * 
   * @see Position
   */
  public Position leader; // required
  public Card north; // optional
  public Card east; // optional
  public Card south; // optional
  public Card west; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 
     * @see Position
     */
    LEADER((short)1, "leader"),
    NORTH((short)2, "north"),
    EAST((short)3, "east"),
    SOUTH((short)4, "south"),
    WEST((short)5, "west");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // LEADER
          return LEADER;
        case 2: // NORTH
          return NORTH;
        case 3: // EAST
          return EAST;
        case 4: // SOUTH
          return SOUTH;
        case 5: // WEST
          return WEST;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private _Fields optionals[] = {_Fields.NORTH,_Fields.EAST,_Fields.SOUTH,_Fields.WEST};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.LEADER, new org.apache.thrift.meta_data.FieldMetaData("leader", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, Position.class)));
    tmpMap.put(_Fields.NORTH, new org.apache.thrift.meta_data.FieldMetaData("north", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Card.class)));
    tmpMap.put(_Fields.EAST, new org.apache.thrift.meta_data.FieldMetaData("east", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Card.class)));
    tmpMap.put(_Fields.SOUTH, new org.apache.thrift.meta_data.FieldMetaData("south", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Card.class)));
    tmpMap.put(_Fields.WEST, new org.apache.thrift.meta_data.FieldMetaData("west", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Card.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Trick.class, metaDataMap);
  }

  public Trick() {
  }

  public Trick(
    Position leader)
  {
    this();
    this.leader = leader;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Trick(Trick other) {
    if (other.isSetLeader()) {
      this.leader = other.leader;
    }
    if (other.isSetNorth()) {
      this.north = new Card(other.north);
    }
    if (other.isSetEast()) {
      this.east = new Card(other.east);
    }
    if (other.isSetSouth()) {
      this.south = new Card(other.south);
    }
    if (other.isSetWest()) {
      this.west = new Card(other.west);
    }
  }

  public Trick deepCopy() {
    return new Trick(this);
  }

  @Override
  public void clear() {
    this.leader = null;
    this.north = null;
    this.east = null;
    this.south = null;
    this.west = null;
  }

  /**
   * 
   * @see Position
   */
  public Position getLeader() {
    return this.leader;
  }

  /**
   * 
   * @see Position
   */
  public Trick setLeader(Position leader) {
    this.leader = leader;
    return this;
  }

  public void unsetLeader() {
    this.leader = null;
  }

  /** Returns true if field leader is set (has been assigned a value) and false otherwise */
  public boolean isSetLeader() {
    return this.leader != null;
  }

  public void setLeaderIsSet(boolean value) {
    if (!value) {
      this.leader = null;
    }
  }

  public Card getNorth() {
    return this.north;
  }

  public Trick setNorth(Card north) {
    this.north = north;
    return this;
  }

  public void unsetNorth() {
    this.north = null;
  }

  /** Returns true if field north is set (has been assigned a value) and false otherwise */
  public boolean isSetNorth() {
    return this.north != null;
  }

  public void setNorthIsSet(boolean value) {
    if (!value) {
      this.north = null;
    }
  }

  public Card getEast() {
    return this.east;
  }

  public Trick setEast(Card east) {
    this.east = east;
    return this;
  }

  public void unsetEast() {
    this.east = null;
  }

  /** Returns true if field east is set (has been assigned a value) and false otherwise */
  public boolean isSetEast() {
    return this.east != null;
  }

  public void setEastIsSet(boolean value) {
    if (!value) {
      this.east = null;
    }
  }

  public Card getSouth() {
    return this.south;
  }

  public Trick setSouth(Card south) {
    this.south = south;
    return this;
  }

  public void unsetSouth() {
    this.south = null;
  }

  /** Returns true if field south is set (has been assigned a value) and false otherwise */
  public boolean isSetSouth() {
    return this.south != null;
  }

  public void setSouthIsSet(boolean value) {
    if (!value) {
      this.south = null;
    }
  }

  public Card getWest() {
    return this.west;
  }

  public Trick setWest(Card west) {
    this.west = west;
    return this;
  }

  public void unsetWest() {
    this.west = null;
  }

  /** Returns true if field west is set (has been assigned a value) and false otherwise */
  public boolean isSetWest() {
    return this.west != null;
  }

  public void setWestIsSet(boolean value) {
    if (!value) {
      this.west = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case LEADER:
      if (value == null) {
        unsetLeader();
      } else {
        setLeader((Position)value);
      }
      break;

    case NORTH:
      if (value == null) {
        unsetNorth();
      } else {
        setNorth((Card)value);
      }
      break;

    case EAST:
      if (value == null) {
        unsetEast();
      } else {
        setEast((Card)value);
      }
      break;

    case SOUTH:
      if (value == null) {
        unsetSouth();
      } else {
        setSouth((Card)value);
      }
      break;

    case WEST:
      if (value == null) {
        unsetWest();
      } else {
        setWest((Card)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case LEADER:
      return getLeader();

    case NORTH:
      return getNorth();

    case EAST:
      return getEast();

    case SOUTH:
      return getSouth();

    case WEST:
      return getWest();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case LEADER:
      return isSetLeader();
    case NORTH:
      return isSetNorth();
    case EAST:
      return isSetEast();
    case SOUTH:
      return isSetSouth();
    case WEST:
      return isSetWest();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Trick)
      return this.equals((Trick)that);
    return false;
  }

  public boolean equals(Trick that) {
    if (that == null)
      return false;

    boolean this_present_leader = true && this.isSetLeader();
    boolean that_present_leader = true && that.isSetLeader();
    if (this_present_leader || that_present_leader) {
      if (!(this_present_leader && that_present_leader))
        return false;
      if (!this.leader.equals(that.leader))
        return false;
    }

    boolean this_present_north = true && this.isSetNorth();
    boolean that_present_north = true && that.isSetNorth();
    if (this_present_north || that_present_north) {
      if (!(this_present_north && that_present_north))
        return false;
      if (!this.north.equals(that.north))
        return false;
    }

    boolean this_present_east = true && this.isSetEast();
    boolean that_present_east = true && that.isSetEast();
    if (this_present_east || that_present_east) {
      if (!(this_present_east && that_present_east))
        return false;
      if (!this.east.equals(that.east))
        return false;
    }

    boolean this_present_south = true && this.isSetSouth();
    boolean that_present_south = true && that.isSetSouth();
    if (this_present_south || that_present_south) {
      if (!(this_present_south && that_present_south))
        return false;
      if (!this.south.equals(that.south))
        return false;
    }

    boolean this_present_west = true && this.isSetWest();
    boolean that_present_west = true && that.isSetWest();
    if (this_present_west || that_present_west) {
      if (!(this_present_west && that_present_west))
        return false;
      if (!this.west.equals(that.west))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(Trick other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    Trick typedOther = (Trick)other;

    lastComparison = Boolean.valueOf(isSetLeader()).compareTo(typedOther.isSetLeader());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLeader()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.leader, typedOther.leader);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNorth()).compareTo(typedOther.isSetNorth());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNorth()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.north, typedOther.north);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEast()).compareTo(typedOther.isSetEast());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEast()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.east, typedOther.east);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSouth()).compareTo(typedOther.isSetSouth());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSouth()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.south, typedOther.south);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetWest()).compareTo(typedOther.isSetWest());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWest()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.west, typedOther.west);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Trick(");
    boolean first = true;

    sb.append("leader:");
    if (this.leader == null) {
      sb.append("null");
    } else {
      sb.append(this.leader);
    }
    first = false;
    if (isSetNorth()) {
      if (!first) sb.append(", ");
      sb.append("north:");
      if (this.north == null) {
        sb.append("null");
      } else {
        sb.append(this.north);
      }
      first = false;
    }
    if (isSetEast()) {
      if (!first) sb.append(", ");
      sb.append("east:");
      if (this.east == null) {
        sb.append("null");
      } else {
        sb.append(this.east);
      }
      first = false;
    }
    if (isSetSouth()) {
      if (!first) sb.append(", ");
      sb.append("south:");
      if (this.south == null) {
        sb.append("null");
      } else {
        sb.append(this.south);
      }
      first = false;
    }
    if (isSetWest()) {
      if (!first) sb.append(", ");
      sb.append("west:");
      if (this.west == null) {
        sb.append("null");
      } else {
        sb.append(this.west);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (leader == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'leader' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
    if (north != null) {
      north.validate();
    }
    if (east != null) {
      east.validate();
    }
    if (south != null) {
      south.validate();
    }
    if (west != null) {
      west.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TrickStandardSchemeFactory implements SchemeFactory {
    public TrickStandardScheme getScheme() {
      return new TrickStandardScheme();
    }
  }

  private static class TrickStandardScheme extends StandardScheme<Trick> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Trick struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // LEADER
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.leader = Position.findByValue(iprot.readI32());
              struct.setLeaderIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // NORTH
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.north = new Card();
              struct.north.read(iprot);
              struct.setNorthIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // EAST
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.east = new Card();
              struct.east.read(iprot);
              struct.setEastIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // SOUTH
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.south = new Card();
              struct.south.read(iprot);
              struct.setSouthIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // WEST
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.west = new Card();
              struct.west.read(iprot);
              struct.setWestIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Trick struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.leader != null) {
        oprot.writeFieldBegin(LEADER_FIELD_DESC);
        oprot.writeI32(struct.leader.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.north != null) {
        if (struct.isSetNorth()) {
          oprot.writeFieldBegin(NORTH_FIELD_DESC);
          struct.north.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.east != null) {
        if (struct.isSetEast()) {
          oprot.writeFieldBegin(EAST_FIELD_DESC);
          struct.east.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.south != null) {
        if (struct.isSetSouth()) {
          oprot.writeFieldBegin(SOUTH_FIELD_DESC);
          struct.south.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.west != null) {
        if (struct.isSetWest()) {
          oprot.writeFieldBegin(WEST_FIELD_DESC);
          struct.west.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TrickTupleSchemeFactory implements SchemeFactory {
    public TrickTupleScheme getScheme() {
      return new TrickTupleScheme();
    }
  }

  private static class TrickTupleScheme extends TupleScheme<Trick> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Trick struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeI32(struct.leader.getValue());
      BitSet optionals = new BitSet();
      if (struct.isSetNorth()) {
        optionals.set(0);
      }
      if (struct.isSetEast()) {
        optionals.set(1);
      }
      if (struct.isSetSouth()) {
        optionals.set(2);
      }
      if (struct.isSetWest()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetNorth()) {
        struct.north.write(oprot);
      }
      if (struct.isSetEast()) {
        struct.east.write(oprot);
      }
      if (struct.isSetSouth()) {
        struct.south.write(oprot);
      }
      if (struct.isSetWest()) {
        struct.west.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Trick struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.leader = Position.findByValue(iprot.readI32());
      struct.setLeaderIsSet(true);
      BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.north = new Card();
        struct.north.read(iprot);
        struct.setNorthIsSet(true);
      }
      if (incoming.get(1)) {
        struct.east = new Card();
        struct.east.read(iprot);
        struct.setEastIsSet(true);
      }
      if (incoming.get(2)) {
        struct.south = new Card();
        struct.south.read(iprot);
        struct.setSouthIsSet(true);
      }
      if (incoming.get(3)) {
        struct.west = new Card();
        struct.west.read(iprot);
        struct.setWestIsSet(true);
      }
    }
  }

}

