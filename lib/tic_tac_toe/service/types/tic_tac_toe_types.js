//
// Autogenerated by Thrift Compiler (0.9.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var Thrift = require('thrift').Thrift;
var ttypes = module.exports = {};
if (typeof TicTacToe === 'undefined') {
  TicTacToe = {};
}
ttypes.Position = {
'X' : 1,
'O' : 2
};
TicTacToe.EntryRequest = module.exports.EntryRequest = function(args) {
  this.version = '0.0.11';
  if (args) {
    if (args.version !== undefined) {
      this.version = args.version;
    }
  }
};
TicTacToe.EntryRequest.prototype = {};
TicTacToe.EntryRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.version = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TicTacToe.EntryRequest.prototype.write = function(output) {
  output.writeStructBegin('EntryRequest');
  if (this.version !== null && this.version !== undefined) {
    output.writeFieldBegin('version', Thrift.Type.STRING, 1);
    output.writeString(this.version);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TicTacToe.Ticket = module.exports.Ticket = function(args) {
  this.gameId = null;
  this.agentId = null;
  if (args) {
    if (args.gameId !== undefined) {
      this.gameId = args.gameId;
    }
    if (args.agentId !== undefined) {
      this.agentId = args.agentId;
    }
  }
};
TicTacToe.Ticket.prototype = {};
TicTacToe.Ticket.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.gameId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.agentId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TicTacToe.Ticket.prototype.write = function(output) {
  output.writeStructBegin('Ticket');
  if (this.gameId !== null && this.gameId !== undefined) {
    output.writeFieldBegin('gameId', Thrift.Type.STRING, 1);
    output.writeString(this.gameId);
    output.writeFieldEnd();
  }
  if (this.agentId !== null && this.agentId !== undefined) {
    output.writeFieldBegin('agentId', Thrift.Type.STRING, 2);
    output.writeString(this.agentId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TicTacToe.EntryResponse = module.exports.EntryResponse = function(args) {
  this.ticket = null;
  this.message = null;
  if (args) {
    if (args.ticket !== undefined) {
      this.ticket = args.ticket;
    }
    if (args.message !== undefined) {
      this.message = args.message;
    }
  }
};
TicTacToe.EntryResponse.prototype = {};
TicTacToe.EntryResponse.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ticket = new ttypes.Ticket();
        this.ticket.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.message = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TicTacToe.EntryResponse.prototype.write = function(output) {
  output.writeStructBegin('EntryResponse');
  if (this.ticket !== null && this.ticket !== undefined) {
    output.writeFieldBegin('ticket', Thrift.Type.STRUCT, 1);
    this.ticket.write(output);
    output.writeFieldEnd();
  }
  if (this.message !== null && this.message !== undefined) {
    output.writeFieldBegin('message', Thrift.Type.STRING, 2);
    output.writeString(this.message);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TicTacToe.GameInfo = module.exports.GameInfo = function(args) {
  this.position = null;
  if (args) {
    if (args.position !== undefined) {
      this.position = args.position;
    }
  }
};
TicTacToe.GameInfo.prototype = {};
TicTacToe.GameInfo.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.position = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TicTacToe.GameInfo.prototype.write = function(output) {
  output.writeStructBegin('GameInfo');
  if (this.position !== null && this.position !== undefined) {
    output.writeFieldBegin('position', Thrift.Type.I32, 1);
    output.writeI32(this.position);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TicTacToe.GameResult = module.exports.GameResult = function(args) {
  this.winner = null;
  if (args) {
    if (args.winner !== undefined) {
      this.winner = args.winner;
    }
  }
};
TicTacToe.GameResult.prototype = {};
TicTacToe.GameResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.winner = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TicTacToe.GameResult.prototype.write = function(output) {
  output.writeStructBegin('GameResult');
  if (this.winner !== null && this.winner !== undefined) {
    output.writeFieldBegin('winner', Thrift.Type.I32, 1);
    output.writeI32(this.winner);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TicTacToe.GameAbortedException = module.exports.GameAbortedException = function(args) {
  Thrift.TException.call(this, "TicTacToe.GameAbortedException")
  this.name = "TicTacToe.GameAbortedException"
  this.message = null;
  if (args) {
    if (args.message !== undefined) {
      this.message = args.message;
    }
  }
};
Thrift.inherits(TicTacToe.GameAbortedException, Thrift.TException);
TicTacToe.GameAbortedException.prototype.name = 'GameAbortedException';
TicTacToe.GameAbortedException.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.message = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TicTacToe.GameAbortedException.prototype.write = function(output) {
  output.writeStructBegin('GameAbortedException');
  if (this.message !== null && this.message !== undefined) {
    output.writeFieldBegin('message', Thrift.Type.STRING, 1);
    output.writeString(this.message);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ttypes.CURRENT_VERSION = '0.0.11';
