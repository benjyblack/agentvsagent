//
// Autogenerated by Thrift Compiler (0.9.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//


//HELPER FUNCTIONS AND STRUCTURES

TicTacToe.TicTacToe_enter_arena_args = function(args) {
  this.request = null;
  if (args) {
    if (args.request !== undefined) {
      this.request = args.request;
    }
  }
};
TicTacToe.TicTacToe_enter_arena_args.prototype = {};
TicTacToe.TicTacToe_enter_arena_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.request = new TicTacToe.EntryRequest();
        this.request.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TicTacToe.TicTacToe_enter_arena_args.prototype.write = function(output) {
  output.writeStructBegin('TicTacToe_enter_arena_args');
  if (this.request !== null && this.request !== undefined) {
    output.writeFieldBegin('request', Thrift.Type.STRUCT, 1);
    this.request.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TicTacToe.TicTacToe_enter_arena_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
TicTacToe.TicTacToe_enter_arena_result.prototype = {};
TicTacToe.TicTacToe_enter_arena_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new TicTacToe.EntryResponse();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TicTacToe.TicTacToe_enter_arena_result.prototype.write = function(output) {
  output.writeStructBegin('TicTacToe_enter_arena_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TicTacToe.TicTacToe_get_game_info_args = function(args) {
  this.ticket = null;
  if (args) {
    if (args.ticket !== undefined) {
      this.ticket = args.ticket;
    }
  }
};
TicTacToe.TicTacToe_get_game_info_args.prototype = {};
TicTacToe.TicTacToe_get_game_info_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ticket = new TicTacToe.Ticket();
        this.ticket.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TicTacToe.TicTacToe_get_game_info_args.prototype.write = function(output) {
  output.writeStructBegin('TicTacToe_get_game_info_args');
  if (this.ticket !== null && this.ticket !== undefined) {
    output.writeFieldBegin('ticket', Thrift.Type.STRUCT, 1);
    this.ticket.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TicTacToe.TicTacToe_get_game_info_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof TicTacToe.GameAbortedException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.ex1 !== undefined) {
      this.ex1 = args.ex1;
    }
  }
};
TicTacToe.TicTacToe_get_game_info_result.prototype = {};
TicTacToe.TicTacToe_get_game_info_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new TicTacToe.GameInfo();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new TicTacToe.GameAbortedException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TicTacToe.TicTacToe_get_game_info_result.prototype.write = function(output) {
  output.writeStructBegin('TicTacToe_get_game_info_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TicTacToe.TicTacToe_make_move_args = function(args) {
  this.coordinates = null;
  if (args) {
    if (args.coordinates !== undefined) {
      this.coordinates = args.coordinates;
    }
  }
};
TicTacToe.TicTacToe_make_move_args.prototype = {};
TicTacToe.TicTacToe_make_move_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size8 = 0;
        var _rtmp312;
        this.coordinates = [];
        var _etype11 = 0;
        _rtmp312 = input.readListBegin();
        _etype11 = _rtmp312.etype;
        _size8 = _rtmp312.size;
        for (var _i13 = 0; _i13 < _size8; ++_i13)
        {
          var elem14 = null;
          elem14 = input.readI32().value;
          this.coordinates.push(elem14);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TicTacToe.TicTacToe_make_move_args.prototype.write = function(output) {
  output.writeStructBegin('TicTacToe_make_move_args');
  if (this.coordinates !== null && this.coordinates !== undefined) {
    output.writeFieldBegin('coordinates', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.I32, this.coordinates.length);
    for (var iter15 in this.coordinates)
    {
      if (this.coordinates.hasOwnProperty(iter15))
      {
        iter15 = this.coordinates[iter15];
        output.writeI32(iter15);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TicTacToe.TicTacToe_make_move_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof TicTacToe.GameAbortedException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.ex1 !== undefined) {
      this.ex1 = args.ex1;
    }
  }
};
TicTacToe.TicTacToe_make_move_result.prototype = {};
TicTacToe.TicTacToe_make_move_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new TicTacToe.MoveResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new TicTacToe.GameAbortedException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TicTacToe.TicTacToe_make_move_result.prototype.write = function(output) {
  output.writeStructBegin('TicTacToe_make_move_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TicTacToe.TicTacToe_get_game_result_args = function(args) {
  this.ticket = null;
  if (args) {
    if (args.ticket !== undefined) {
      this.ticket = args.ticket;
    }
  }
};
TicTacToe.TicTacToe_get_game_result_args.prototype = {};
TicTacToe.TicTacToe_get_game_result_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ticket = new TicTacToe.Ticket();
        this.ticket.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TicTacToe.TicTacToe_get_game_result_args.prototype.write = function(output) {
  output.writeStructBegin('TicTacToe_get_game_result_args');
  if (this.ticket !== null && this.ticket !== undefined) {
    output.writeFieldBegin('ticket', Thrift.Type.STRUCT, 1);
    this.ticket.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TicTacToe.TicTacToe_get_game_result_result = function(args) {
  this.success = null;
  this.ex2 = null;
  if (args instanceof TicTacToe.GameAbortedException) {
    this.ex2 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.ex2 !== undefined) {
      this.ex2 = args.ex2;
    }
  }
};
TicTacToe.TicTacToe_get_game_result_result.prototype = {};
TicTacToe.TicTacToe_get_game_result_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new TicTacToe.GameResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex2 = new TicTacToe.GameAbortedException();
        this.ex2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TicTacToe.TicTacToe_get_game_result_result.prototype.write = function(output) {
  output.writeStructBegin('TicTacToe_get_game_result_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.ex2 !== null && this.ex2 !== undefined) {
    output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 1);
    this.ex2.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TicTacToe.TicTacToeClient = function(input, output) {
    this.input = input;
    this.output = (!output) ? input : output;
    this.seqid = 0;
};
TicTacToe.TicTacToeClient.prototype = {};
TicTacToe.TicTacToeClient.prototype.enter_arena = function(request, callback) {
  if (callback === undefined) {
    this.send_enter_arena(request);
    return this.recv_enter_arena();
  } else {
    var postData = this.send_enter_arena(request, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_enter_arena);
  }
};

TicTacToe.TicTacToeClient.prototype.send_enter_arena = function(request, callback) {
  this.output.writeMessageBegin('enter_arena', Thrift.MessageType.CALL, this.seqid);
  var args = new TicTacToe.TicTacToe_enter_arena_args();
  args.request = request;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

TicTacToe.TicTacToeClient.prototype.recv_enter_arena = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new TicTacToe.TicTacToe_enter_arena_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'enter_arena failed: unknown result';
};
TicTacToe.TicTacToeClient.prototype.get_game_info = function(ticket, callback) {
  if (callback === undefined) {
    this.send_get_game_info(ticket);
    return this.recv_get_game_info();
  } else {
    var postData = this.send_get_game_info(ticket, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_get_game_info);
  }
};

TicTacToe.TicTacToeClient.prototype.send_get_game_info = function(ticket, callback) {
  this.output.writeMessageBegin('get_game_info', Thrift.MessageType.CALL, this.seqid);
  var args = new TicTacToe.TicTacToe_get_game_info_args();
  args.ticket = ticket;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

TicTacToe.TicTacToeClient.prototype.recv_get_game_info = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new TicTacToe.TicTacToe_get_game_info_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex1) {
    throw result.ex1;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'get_game_info failed: unknown result';
};
TicTacToe.TicTacToeClient.prototype.make_move = function(coordinates, callback) {
  if (callback === undefined) {
    this.send_make_move(coordinates);
    return this.recv_make_move();
  } else {
    var postData = this.send_make_move(coordinates, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_make_move);
  }
};

TicTacToe.TicTacToeClient.prototype.send_make_move = function(coordinates, callback) {
  this.output.writeMessageBegin('make_move', Thrift.MessageType.CALL, this.seqid);
  var args = new TicTacToe.TicTacToe_make_move_args();
  args.coordinates = coordinates;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

TicTacToe.TicTacToeClient.prototype.recv_make_move = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new TicTacToe.TicTacToe_make_move_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex1) {
    throw result.ex1;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'make_move failed: unknown result';
};
TicTacToe.TicTacToeClient.prototype.get_game_result = function(ticket, callback) {
  if (callback === undefined) {
    this.send_get_game_result(ticket);
    return this.recv_get_game_result();
  } else {
    var postData = this.send_get_game_result(ticket, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_get_game_result);
  }
};

TicTacToe.TicTacToeClient.prototype.send_get_game_result = function(ticket, callback) {
  this.output.writeMessageBegin('get_game_result', Thrift.MessageType.CALL, this.seqid);
  var args = new TicTacToe.TicTacToe_get_game_result_args();
  args.ticket = ticket;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

TicTacToe.TicTacToeClient.prototype.recv_get_game_result = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new TicTacToe.TicTacToe_get_game_result_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex2) {
    throw result.ex2;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'get_game_result failed: unknown result';
};
